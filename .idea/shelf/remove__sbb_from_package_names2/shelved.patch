Index: app/src/main/java/ch/zuehlke/reddit/util/ActivityUtils.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.util\n\nimport android.support.v4.app.Fragment\nimport android.support.v4.app.FragmentManager\nimport android.support.v4.app.FragmentTransaction\n\nimport com.google.common.base.Preconditions.checkNotNull\n\n/**\n * Created by chsc on 08.11.17.\n */\n\nobject ActivityUtils {\n\n    /**\n     * The `fragment` is added to the container view with id `frameId`. The operation is\n     * performed by the `fragmentManager`.\n\n     */\n    fun addFragmentToActivity(fragmentManager: FragmentManager,\n                              fragment: Fragment, frameId: Int) {\n        checkNotNull(fragmentManager)\n        checkNotNull(fragment)\n        val transaction = fragmentManager.beginTransaction()\n        transaction.add(frameId, fragment)\n        transaction.commit()\n    }\n\n    fun replaceFragmentToActivity(fragmentManager: FragmentManager,\n                              fragment: Fragment, frameId: Int) {\n        checkNotNull(fragmentManager)\n        checkNotNull(fragment)\n        val transaction = fragmentManager.beginTransaction()\n        transaction.replace(frameId, fragment).addToBackStack( null )\n        transaction.commit()\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/util/ActivityUtils.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/util/ActivityUtils.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.util
+package ch.zuehlke.reddit.util
 
 import android.support.v4.app.Fragment
 import android.support.v4.app.FragmentManager
Index: app/src/prod/java/ch/zuehlke/reddit/Injection.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.reddit\n\n\nimport android.content.Context\nimport ch.zuehlke.sbb.reddit.data.source.RedditRepository\nimport ch.zuehlke.sbb.reddit.data.source.RemoteDataMapper\nimport ch.zuehlke.sbb.reddit.data.source.local.RedditNewsLocalDataSource\nimport ch.zuehlke.sbb.reddit.data.source.remote.RedditAPI\nimport ch.zuehlke.sbb.reddit.data.source.remote.RedditElementTypeAdapterFactory.Companion.elementTypeAdapterFactory\nimport ch.zuehlke.sbb.reddit.data.source.remote.RedditNewsDataRemoteDataSource\nimport ch.zuehlke.sbb.reddit.data.source.remote.model.posts.RedditPostElement\nimport com.google.common.base.Preconditions.checkNotNull\nimport com.google.gson.GsonBuilder\nimport com.google.gson.reflect.TypeToken\nimport okhttp3.OkHttpClient\nimport okhttp3.logging.HttpLoggingInterceptor\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\nimport java.lang.reflect.Modifier\n\n\n/**\n * Enables injection of production implementations for\n * [ch.zuehlke.sbb.reddit.data.source.RedditDataSource] at compile time.\n */\nobject Injection {\n\n\n    val type = object : TypeToken<List<RedditPostElement>>() {\n\n    }.type\n\n\n    val gson = GsonBuilder()\n            .registerTypeAdapterFactory(elementTypeAdapterFactory)\n            .create()\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/prod/java/ch/zuehlke/reddit/Injection.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/prod/java/ch/zuehlke/reddit/Injection.kt	(revision )
@@ -2,13 +2,13 @@
 
 
 import android.content.Context
-import ch.zuehlke.sbb.reddit.data.source.RedditRepository
-import ch.zuehlke.sbb.reddit.data.source.RemoteDataMapper
-import ch.zuehlke.sbb.reddit.data.source.local.RedditNewsLocalDataSource
-import ch.zuehlke.sbb.reddit.data.source.remote.RedditAPI
-import ch.zuehlke.sbb.reddit.data.source.remote.RedditElementTypeAdapterFactory.Companion.elementTypeAdapterFactory
-import ch.zuehlke.sbb.reddit.data.source.remote.RedditNewsDataRemoteDataSource
-import ch.zuehlke.sbb.reddit.data.source.remote.model.posts.RedditPostElement
+import ch.zuehlke.reddit.data.source.RedditRepository
+import ch.zuehlke.reddit.data.source.RemoteDataMapper
+import ch.zuehlke.reddit.data.source.local.RedditNewsLocalDataSource
+import ch.zuehlke.reddit.data.source.remote.RedditAPI
+import ch.zuehlke.reddit.data.source.remote.RedditElementTypeAdapterFactory.Companion.elementTypeAdapterFactory
+import ch.zuehlke.reddit.data.source.remote.RedditNewsDataRemoteDataSource
+import ch.zuehlke.reddit.data.source.remote.model.posts.RedditPostElement
 import com.google.common.base.Preconditions.checkNotNull
 import com.google.gson.GsonBuilder
 import com.google.gson.reflect.TypeToken
@@ -21,7 +21,7 @@
 
 /**
  * Enables injection of production implementations for
- * [ch.zuehlke.sbb.reddit.data.source.RedditDataSource] at compile time.
+ * [ch.zuehlke.reddit.data.source.RedditDataSource] at compile time.
  */
 object Injection {
 
Index: app/src/main/java/ch/zuehlke/reddit/features/login/LoginViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.features.login\n\nimport android.arch.lifecycle.LiveData\nimport android.arch.lifecycle.MutableLiveData\nimport android.arch.lifecycle.ViewModel\nimport com.google.common.base.Strings\nimport java.util.regex.Pattern\nimport javax.inject.Inject\n\n\n/**\n * Created by celineheldner on 28.02.18.\n */\nclass LoginViewModel: ViewModel{\n\n    private val mutableViewState: MutableLiveData<ViewState> = MutableLiveData<ViewState>().apply { ViewState.NONE }\n    val viewState : LiveData<ViewState> = mutableViewState\n\n    private val emailPattern: Pattern = Pattern.compile(\n            \"^(([\\\\w-]+\\\\.)+[\\\\w-]+|([a-zA-Z]|[\\\\w-]{2,}))@\"\n                    + \"((([0-1]?[0-9]{1,2}|25[0-5]|2[0-4][0-9])\\\\.([0-1]?\"\n                    + \"[0-9]{1,2}|25[0-5]|2[0-4][0-9])\\\\.\"\n                    + \"([0-1]?[0-9]{1,2}|25[0-5]|2[0-4][0-9])\\\\.([0-1]?\"\n                    + \"[0-9]{1,2}|25[0-5]|2[0-4][0-9]))|\"\n                    + \"([a-zA-Z]+[\\\\w-]+\\\\.)+[a-zA-Z]{2,4})$\")\n\n    enum class ViewState{\n        LOADING,NONE,INVALID_PASSWORD,INVALID_USERNAME,INVALID_CREDENTIALS,LOGGED_IN\n    }\n\n    @Inject constructor(){\n\n    }\n\n    fun login(userEmail: String, password: String) {\n        mutableViewState.postValue(ViewState.LOADING)\n        when{\n            userEmail != \"test.tester@test.com\" && password != \"123456\" -> {  mutableViewState.postValue(ViewState.INVALID_CREDENTIALS)}\n            userEmail != \"test.tester@test.com\" -> {  mutableViewState.postValue(ViewState.INVALID_USERNAME)}\n            password != \"123456\" -> {  mutableViewState.postValue(ViewState.INVALID_PASSWORD)}\n            else -> {mutableViewState.postValue(ViewState.LOGGED_IN)}\n        }\n    }\n\n    fun verifyPasswordLength(password: String): Boolean =\n            !Strings.isNullOrEmpty(password) && password.length >= 6\n\n    fun isEmailValid(email: String): Boolean = emailPattern.matcher(email).matches()\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/features/login/LoginViewModel.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/features/login/LoginViewModel.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.features.login
+package ch.zuehlke.reddit.features.login
 
 import android.arch.lifecycle.LiveData
 import android.arch.lifecycle.MutableLiveData
Index: app/src/main/java/ch/zuehlke/reddit/features/news/overview/InfiniteScrollListener.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.features.news.overview\n\nimport android.support.v7.widget.LinearLayoutManager\nimport android.support.v7.widget.RecyclerView\nimport android.support.v7.widget.RecyclerView.OnScrollListener\nimport android.util.Log\n\n/**\n * Created by chsc on 12.11.17.\n */\n\nabstract class InfiniteScrollListener(private val mLayoutManager: LinearLayoutManager) : OnScrollListener() {\n\n    private var previousTotal = 0\n    private var loading = true\n    private var visibleThreshold = 2\n    private var firstVisibleItem = 0\n    private var visibleItemCount = 0\n    private var totalItemCount = 0\n\n    override fun onScrolled(recyclerView: RecyclerView?, dx: Int, dy: Int) {\n        super.onScrolled(recyclerView, dx, dy)\n        if (dy > 0) {\n            visibleItemCount = recyclerView!!.childCount\n            totalItemCount = mLayoutManager.itemCount\n            firstVisibleItem = mLayoutManager.findFirstCompletelyVisibleItemPosition()\n            if (loading) {\n                if (totalItemCount > previousTotal) {\n                    loading = false\n                    previousTotal = totalItemCount\n                }\n            }\n            if (!loading && totalItemCount - visibleItemCount >= firstVisibleItem + visibleThreshold) {\n                Log.i(TAG, \"End reached\")\n            }\n            if (!loading) {\n                loadingFunction()\n                loading = true\n            }\n\n        }\n    }\n\n    fun reset() {\n        previousTotal = 0\n        loading = false\n        visibleThreshold = 2\n        firstVisibleItem = 0\n        visibleItemCount = 0\n        totalItemCount = 0\n\n    }\n\n    abstract fun loadingFunction()\n\n    companion object {\n\n        private val TAG = \"InfiniteScrollListener\"\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/features/news/overview/InfiniteScrollListener.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/features/news/overview/InfiniteScrollListener.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.features.news.overview
+package ch.zuehlke.reddit.features.news.overview
 
 import android.support.v7.widget.LinearLayoutManager
 import android.support.v7.widget.RecyclerView
Index: app/src/main/java/ch/zuehlke/reddit/data/source/remote/model/posts/RedditPost.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.data.source.remote.model.posts\n\nimport com.google.gson.annotations.Expose\n\n/**\n * Created by chsc on 13.11.17.\n */\n\nclass RedditPost {\n\n    @Expose\n    var id: String? = null\n    @Expose\n    var children: List<RedditPostElement>? = null\n    @Expose\n    var replies: RedditPostElement? = null\n    @Expose\n    var author: String? = null\n    @Expose\n    var body: String? = null\n    @Expose\n    var created_utc: Long = 0\n    @Expose\n    var depth = 0\n    @Expose\n    var body_html: String? = null\n    @Expose\n    var permalink: String? = null\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/data/source/remote/model/posts/RedditPost.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/data/source/remote/model/posts/RedditPost.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.data.source.remote.model.posts
+package ch.zuehlke.reddit.data.source.remote.model.posts
 
 import com.google.gson.annotations.Expose
 
Index: app/src/main/java/ch/zuehlke/reddit/features/login/LoginFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.features.login\n\nimport android.arch.lifecycle.Observer\nimport android.arch.lifecycle.ViewModelProviders\nimport android.content.Intent\nimport android.os.Bundle\nimport android.support.v4.app.Fragment\nimport android.text.Editable\nimport android.text.TextWatcher\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport ch.zuehlke.sbb.reddit.R\nimport ch.zuehlke.sbb.reddit.di.Injectable\nimport ch.zuehlke.sbb.reddit.features.news.NewsActivity\nimport kotlinx.android.synthetic.main.fragment_login.*\n\n\n/**\n * Created by chsc on 08.11.17.\n */\n\nclass LoginFragment : Fragment(), Injectable {\n\n    companion object {\n\n        fun newInstance(): LoginFragment = LoginFragment()\n\n        private const val BUNDLE_KEY_USERNAME = \"bundle_username\"\n    }\n\n    override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?, savedInstanceState: Bundle?): View? =\n            inflater!!.inflate(R.layout.fragment_login, container, false)\n\n    override fun onSaveInstanceState(outState: Bundle?) {\n        outState?.putString(BUNDLE_KEY_USERNAME,username.text.toString())\n        super.onSaveInstanceState(outState)\n    }\n\n    override fun onViewStateRestored(savedInstanceState: Bundle?) {\n        savedInstanceState?.let {\n            username.setText(savedInstanceState.getString(BUNDLE_KEY_USERNAME,\"\"))\n        }\n        super.onViewStateRestored(savedInstanceState)\n    }\n\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\n        super.onActivityCreated(savedInstanceState)\n        val loginViewModel = ViewModelProviders.of(activity).get(LoginViewModel::class.java)\n        loginViewModel.viewState.observe(this, Observer { viewState: LoginViewModel.ViewState? -> handleViewState(viewState) })\n        loginButton.setOnClickListener{loginViewModel.login(username.text.toString(), password.text.toString())}\n\n\n            username.addTextChangedListener(object : TextWatcher {\n            override fun beforeTextChanged(charSequence: CharSequence, i: Int, i1: Int, i2: Int) {\n                // Do nothing\n            }\n\n            override fun onTextChanged(charSequence: CharSequence, i: Int, i1: Int, i2: Int) {\n                // Do nothing\n            }\n\n            override fun afterTextChanged(editable: Editable) {\n                if (editable.isNotEmpty() && loginViewModel.isEmailValid(editable.toString())) {\n                    usernameLayout.error = null\n                } else {\n                    usernameLayout.error = getString(R.string.login_screen_invalid_email)\n                }\n            }\n        })\n\n        password.addTextChangedListener(object : TextWatcher {\n            override fun beforeTextChanged(charSequence: CharSequence, i: Int, i1: Int, i2: Int) {\n\n            }\n\n            override fun onTextChanged(charSequence: CharSequence, i: Int, i1: Int, i2: Int) {\n\n            }\n\n            override fun afterTextChanged(editable: Editable) {\n                if (loginViewModel.verifyPasswordLength(editable.toString())) {\n                    passwordLayout.error = null\n                } else {\n                    passwordLayout.error = getString(R.string.login_screen_invalid_password_length)\n                }\n            }\n        })\n    }\n\n    fun handleViewState(viewState: LoginViewModel.ViewState?){\n        when(viewState){\n            LoginViewModel.ViewState.LOADING -> progressBar.visibility = View.VISIBLE\n            LoginViewModel.ViewState.NONE -> progressBar.visibility = View.GONE\n            LoginViewModel.ViewState.INVALID_PASSWORD -> passwordLayout.error = getString(R.string.login_screen_invalid_password)\n            LoginViewModel.ViewState.INVALID_USERNAME -> usernameLayout.error = getString(R.string.login_screen_invalid_username)\n            LoginViewModel.ViewState.INVALID_CREDENTIALS -> {\n                usernameLayout.error = getString(R.string.login_screen_invalid_username)\n                passwordLayout.error = getString(R.string.login_screen_invalid_password)\n            }\n            LoginViewModel.ViewState.LOGGED_IN -> {\n                progressBar.visibility = View.GONE\n                val intent = Intent(context, NewsActivity::class.java)\n                startActivity(intent)\n                activity.finish()\n            }\n        }\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/features/login/LoginFragment.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/features/login/LoginFragment.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.features.login
+package ch.zuehlke.reddit.features.login
 
 import android.arch.lifecycle.Observer
 import android.arch.lifecycle.ViewModelProviders
@@ -10,9 +10,9 @@
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
-import ch.zuehlke.sbb.reddit.R
-import ch.zuehlke.sbb.reddit.di.Injectable
-import ch.zuehlke.sbb.reddit.features.news.NewsActivity
+import ch.zuehlke.reddit.R
+import ch.zuehlke.reddit.di.Injectable
+import ch.zuehlke.reddit.features.news.NewsActivity
 import kotlinx.android.synthetic.main.fragment_login.*
 
 
Index: app/src/main/java/ch/zuehlke/reddit/di/Injectable.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.di\n/**\n *  Marks an activity / fragment injectable. Shortcut, so we don't have to call AppInjection.inject() in each Activity or Fragment\n * Created by chsc on 12.09.17.\n */\n\ninterface Injectable {\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/di/Injectable.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/di/Injectable.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.di
+package ch.zuehlke.reddit.di
 /**
  *  Marks an activity / fragment injectable. Shortcut, so we don't have to call AppInjection.inject() in each Activity or Fragment
  * Created by chsc on 12.09.17.
Index: app/src/main/java/ch/zuehlke/reddit/di/ViewModelModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.di\n\nimport android.arch.lifecycle.ViewModel\nimport android.arch.lifecycle.ViewModelProvider\nimport ch.zuehlke.sbb.reddit.features.login.LoginViewModel\nimport ch.zuehlke.sbb.reddit.features.news.NewsViewModel\nimport dagger.Binds\nimport dagger.Module\nimport dagger.multibindings.IntoMap\n\n/**\n * Created by celineheldner on 06.03.18.\n */\n@Module\ninternal abstract class ViewModelModule{\n\n    @Binds\n    @IntoMap\n    @ViewModelKey(LoginViewModel::class)\n    abstract fun bindLoginViewModel(loginViewModel: LoginViewModel): ViewModel\n\n    @Binds\n    @IntoMap\n    @ViewModelKey(NewsViewModel::class)\n    abstract fun bindNewsViewModel(newsViewModel: NewsViewModel): ViewModel\n\n    @Binds\n    abstract fun bindViewModelFactory(factory: ViewModelFactory) : ViewModelProvider.Factory\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/di/ViewModelModule.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/di/ViewModelModule.kt	(revision )
@@ -1,9 +1,9 @@
-package ch.zuehlke.sbb.reddit.di
+package ch.zuehlke.reddit.di
 
 import android.arch.lifecycle.ViewModel
 import android.arch.lifecycle.ViewModelProvider
-import ch.zuehlke.sbb.reddit.features.login.LoginViewModel
-import ch.zuehlke.sbb.reddit.features.news.NewsViewModel
+import ch.zuehlke.reddit.features.login.LoginViewModel
+import ch.zuehlke.reddit.features.news.NewsViewModel
 import dagger.Binds
 import dagger.Module
 import dagger.multibindings.IntoMap
Index: app/src/main/java/ch/zuehlke/reddit/features/news/NewsViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.features.news\n\nimport android.arch.lifecycle.LiveData\nimport android.arch.lifecycle.MutableLiveData\nimport android.arch.lifecycle.ViewModel\nimport ch.zuehlke.sbb.reddit.data.source.RedditDataSource\nimport ch.zuehlke.sbb.reddit.data.source.RedditRepository\nimport ch.zuehlke.sbb.reddit.models.RedditNewsData\nimport ch.zuehlke.sbb.reddit.models.RedditPostsData\nimport kotlinx.coroutines.experimental.async\nimport javax.inject.Inject\n\n/**\n * Created by celineheldner on 28.02.18.\n */\n\n\nclass NewsViewModel @Inject constructor( private val redditRepository: RedditRepository): ViewModel(){\n\n    private val mutableRedditNewsData: MutableLiveData<MutableList<RedditNewsData>> = MutableLiveData<MutableList<RedditNewsData>>().apply { emptyList<RedditNewsData>() }\n    val redditNewsData: LiveData<MutableList<RedditNewsData>> = mutableRedditNewsData\n\n\n    private val mutableMoreRedditNewsData: MutableLiveData<MutableList<RedditNewsData>> = MutableLiveData<MutableList<RedditNewsData>>().apply { emptyList<RedditNewsData>() }\n    val moreRedditNewsData: LiveData<MutableList<RedditNewsData>> = mutableMoreRedditNewsData\n\n    private val mutableViewState: MutableLiveData<ViewState> = MutableLiveData()\n    val viewState: LiveData<ViewState> = mutableViewState\n\n    private val mutableRedditPostData: MutableLiveData<MutableList<RedditPostsData>> = MutableLiveData<MutableList<RedditPostsData>>().apply { mutableListOf<RedditPostsData>() }\n    val redditPostData : LiveData<MutableList<RedditPostsData>> = mutableRedditPostData\n\n    private var currentPostUrl: String? = null\n\n    enum class ViewState{LOADING, NONE, NO_DATA_AVAILABLE, ERROR }\n\n    init {\n        loadRedditNews(true,true)\n    }\n\n\n     fun loadMoreRedditNews() {\n        async {\n            redditRepository.getMoreNews(object : RedditDataSource.LoadNewsCallback {\n                override fun onNewsLoaded(news: List<RedditNewsData>) {\n                    mutableMoreRedditNewsData.postValue(news.toMutableList())\n                }\n\n                override fun onDataNotAvailable() {\n                    mutableViewState.postValue(ViewState.NO_DATA_AVAILABLE)\n                }\n            })\n        }\n\n\n    }\n\n\n     fun loadRedditNews(forceUpdate: Boolean, showLoadingUI: Boolean) {\n         async {\n             if (showLoadingUI) {\n                 mutableViewState.postValue(ViewState.LOADING)\n             }\n             if (forceUpdate) {\n                 redditRepository.refreshNews()\n             }\n\n             redditRepository.getNews(object : RedditDataSource.LoadNewsCallback {\n                 override fun onNewsLoaded(news: List<RedditNewsData>) {\n                     if (showLoadingUI) {\n                         mutableViewState.postValue(ViewState.NONE)\n                     }\n                     if (news.isEmpty()){\n                         mutableViewState.postValue(ViewState.NO_DATA_AVAILABLE)\n                     } else {\n                         mutableRedditNewsData.postValue(news.toMutableList())\n                     }\n                 }\n\n                 override fun onDataNotAvailable() {\n                     mutableViewState.postValue(ViewState.ERROR)\n                 }\n             })\n         }\n\n    }\n\n\n    fun loadRedditPosts() {\n        async {\n            mutableViewState.postValue(ViewState.LOADING)\n\n            redditRepository.getPosts(object : RedditDataSource.LoadPostsCallback {\n                override fun onPostsLoaded(posts: List<RedditPostsData>) {\n                    mutableViewState.postValue(ViewState.NONE)\n                    mutableRedditPostData.postValue(posts.toMutableList())\n                }\n\n                override fun onDataNotAvailable() {\n                    mutableViewState.postValue(ViewState.NO_DATA_AVAILABLE)\n                }\n            }, currentPostUrl!!)\n        }\n\n    }\n\n    fun setRedditUrl(redditUrl: String){\n        this.currentPostUrl = redditUrl\n    }\n\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/features/news/NewsViewModel.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/features/news/NewsViewModel.kt	(revision )
@@ -1,12 +1,12 @@
-package ch.zuehlke.sbb.reddit.features.news
+package ch.zuehlke.reddit.features.news
 
 import android.arch.lifecycle.LiveData
 import android.arch.lifecycle.MutableLiveData
 import android.arch.lifecycle.ViewModel
-import ch.zuehlke.sbb.reddit.data.source.RedditDataSource
-import ch.zuehlke.sbb.reddit.data.source.RedditRepository
-import ch.zuehlke.sbb.reddit.models.RedditNewsData
-import ch.zuehlke.sbb.reddit.models.RedditPostsData
+import ch.zuehlke.reddit.data.source.RedditDataSource
+import ch.zuehlke.reddit.data.source.RedditRepository
+import ch.zuehlke.reddit.models.RedditNewsData
+import ch.zuehlke.reddit.models.RedditPostsData
 import kotlinx.coroutines.experimental.async
 import javax.inject.Inject
 
Index: app/src/main/java/ch/zuehlke/reddit/data/source/remote/RedditAPI.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.data.source.remote\n\nimport ch.zuehlke.sbb.reddit.data.source.remote.model.news.RedditNewsAPIResponse\nimport okhttp3.ResponseBody\nimport retrofit2.Call\nimport retrofit2.http.GET\nimport retrofit2.http.Path\nimport retrofit2.http.Query\n\n/**\n * Created by chsc on 12.11.17.\n */\n\ninterface RedditAPI {\n\n    @GET(\"{sortOrder}.json\")\n    fun getSortedNews(@Path(\"sortOrder\") sortOrder: String, @Query(\"after\") after: String,\n                      @Query(\"limit\") limit: String): Call<RedditNewsAPIResponse>\n\n\n    @GET(\"/comments/{title}.json\")\n    fun getRedditPosts(@Path(\"title\") title: String, @Query(\"sort\") sortOrder: String): Call<ResponseBody>\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/data/source/remote/RedditAPI.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/data/source/remote/RedditAPI.kt	(revision )
@@ -1,6 +1,6 @@
-package ch.zuehlke.sbb.reddit.data.source.remote
+package ch.zuehlke.reddit.data.source.remote
 
-import ch.zuehlke.sbb.reddit.data.source.remote.model.news.RedditNewsAPIResponse
+import ch.zuehlke.reddit.data.source.remote.model.news.RedditNewsAPIResponse
 import okhttp3.ResponseBody
 import retrofit2.Call
 import retrofit2.http.GET
Index: app/src/main/java/ch/zuehlke/reddit/features/news/NewsActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.features.news\n\nimport android.os.Bundle\nimport android.support.v7.widget.Toolbar\nimport ch.zuehlke.sbb.reddit.R\nimport ch.zuehlke.sbb.reddit.features.BaseActivtiy\n\n/**\n * Created by chsc on 11.11.17.\n */\n\nclass NewsActivity : BaseActivtiy() {\n\n    private var mNavigationController: NavigationController? = null\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        setContentView(R.layout.activity_news)\n\n        mNavigationController = NavigationController(this, R.id.contentFrame)\n\n        // Set up the toolbar.\n        setSupportActionBar(findViewById<Toolbar>(R.id.toolbar))\n        val ab = supportActionBar\n        ab?.setDisplayHomeAsUpEnabled(false)\n\n\n        mNavigationController?.showOverview()\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/features/news/NewsActivity.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/features/news/NewsActivity.kt	(revision )
@@ -1,9 +1,9 @@
-package ch.zuehlke.sbb.reddit.features.news
+package ch.zuehlke.reddit.features.news
 
 import android.os.Bundle
 import android.support.v7.widget.Toolbar
-import ch.zuehlke.sbb.reddit.R
-import ch.zuehlke.sbb.reddit.features.BaseActivtiy
+import ch.zuehlke.reddit.R
+import ch.zuehlke.reddit.features.BaseActivtiy
 
 /**
  * Created by chsc on 11.11.17.
Index: app/src/main/java/ch/zuehlke/reddit/di/scope/FragmentScope.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.di.scope\n\nimport javax.inject.Scope\n\n/**\n * Created by celineheldner on 07.03.18.\n */\n@MustBeDocumented\n@Scope\n@Retention(AnnotationRetention.RUNTIME)\nannotation class FragmentScope
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/di/scope/FragmentScope.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/di/scope/FragmentScope.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.di.scope
+package ch.zuehlke.reddit.di.scope
 
 import javax.inject.Scope
 
Index: app/src/main/java/ch/zuehlke/reddit/data/source/RedditDataSource.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.data.source\n\nimport ch.zuehlke.sbb.reddit.models.RedditNewsData\nimport ch.zuehlke.sbb.reddit.models.RedditPostsData\n\n/**\n * Created by chsc on 08.11.17.\n */\n\ninterface RedditDataSource {\n\n    interface LoadNewsCallback {\n\n        fun onNewsLoaded(news: List<RedditNewsData>)\n\n        fun onDataNotAvailable()\n    }\n\n    interface LoadPostsCallback {\n\n        fun onPostsLoaded(posts: List<RedditPostsData>)\n\n        fun onDataNotAvailable()\n    }\n\n\n    fun getMoreNews(callback: LoadNewsCallback)\n\n    fun getNews(callback: LoadNewsCallback)\n\n    fun getPosts(callback: LoadPostsCallback, permalink: String)\n\n    fun savePosts(data: RedditPostsData)\n\n    fun deletePostsWithPermaLink(permaLink: String)\n\n    fun refreshNews()\n\n    fun deleteAllNews()\n\n    fun saveRedditNews(data: RedditNewsData)\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/data/source/RedditDataSource.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/data/source/RedditDataSource.kt	(revision )
@@ -1,7 +1,7 @@
-package ch.zuehlke.sbb.reddit.data.source
+package ch.zuehlke.reddit.data.source
 
-import ch.zuehlke.sbb.reddit.models.RedditNewsData
-import ch.zuehlke.sbb.reddit.models.RedditPostsData
+import ch.zuehlke.reddit.models.RedditNewsData
+import ch.zuehlke.reddit.models.RedditPostsData
 
 /**
  * Created by chsc on 08.11.17.
Index: app/src/main/java/ch/zuehlke/reddit/features/news/overview/adapter/AdapterConstants.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.features.news.overview.adapter\n\n/**\n * Created by chsc on 12.11.17.\n */\n\ninterface AdapterConstants {\n    companion object {\n        val NEWS = 1\n        val LOADING = 2\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/features/news/overview/adapter/AdapterConstants.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/features/news/overview/adapter/AdapterConstants.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.features.news.overview.adapter
+package ch.zuehlke.reddit.features.news.overview.adapter
 
 /**
  * Created by chsc on 12.11.17.
Index: app/src/main/java/ch/zuehlke/reddit/features/news/overview/adapter/ViewType.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.features.news.overview.adapter\n\n/**\n * Created by chsc on 12.11.17.\n */\n\ninterface ViewType {\n    val viewType: Int\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/features/news/overview/adapter/ViewType.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/features/news/overview/adapter/ViewType.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.features.news.overview.adapter
+package ch.zuehlke.reddit.features.news.overview.adapter
 
 /**
  * Created by chsc on 12.11.17.
Index: app/src/main/java/ch/zuehlke/reddit/data/source/remote/model/news/RedditNewsAPIChildrenResponseData.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.data.source.remote.model.news\n\nimport com.google.gson.annotations.Expose\n\n/**\n * Created by chsc on 12.11.17.\n */\n\nclass RedditNewsAPIChildrenResponseData {\n\n    @Expose\n    var author: String? = null\n\n    @Expose\n    var title: String? = null\n\n    @Expose\n    var num_comments: Int = 0\n\n    @Expose\n    var created: Long = 0\n\n    @Expose\n    var thumbnail: String? = null\n\n    @Expose\n    var url: String? = null\n\n    @Expose\n    var id: String? = null\n\n    @Expose\n    var permalink: String? = null\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/data/source/remote/model/news/RedditNewsAPIChildrenResponseData.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/data/source/remote/model/news/RedditNewsAPIChildrenResponseData.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.data.source.remote.model.news
+package ch.zuehlke.reddit.data.source.remote.model.news
 
 import com.google.gson.annotations.Expose
 
Index: app/src/androidTest/java/ch/zuehlke/reddit/ExampleInstrumentedTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.reddit\n\nimport android.support.test.InstrumentationRegistry\nimport android.support.test.runner.AndroidJUnit4\n\nimport org.junit.Test\nimport org.junit.runner.RunWith\n\nimport org.junit.Assert.*\n\n/**\n * Instrumented test, which will execute on an Android device.\n *\n * See [testing documentation](http://d.android.com/tools/testing).\n */\n@RunWith(AndroidJUnit4::class)\nclass ExampleInstrumentedTest {\n    @Test\n    fun useAppContext() {\n        // Context of the app under test.\n        val appContext = InstrumentationRegistry.getTargetContext()\n        assertEquals(\"ch.zuehlke.sbb.reddit\", appContext.packageName)\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/androidTest/java/ch/zuehlke/reddit/ExampleInstrumentedTest.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/androidTest/java/ch/zuehlke/reddit/ExampleInstrumentedTest.kt	(revision )
@@ -19,6 +19,6 @@
     fun useAppContext() {
         // Context of the app under test.
         val appContext = InstrumentationRegistry.getTargetContext()
-        assertEquals("ch.zuehlke.sbb.reddit", appContext.packageName)
+        assertEquals("ch.zuehlke.reddit", appContext.packageName)
     }
 }
Index: app/src/main/java/ch/zuehlke/reddit/features/BaseActivtiy.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.features\n\nimport android.arch.lifecycle.ViewModelProvider\nimport android.support.v4.app.Fragment\nimport android.support.v7.app.AppCompatActivity\nimport dagger.android.DispatchingAndroidInjector\nimport dagger.android.support.HasSupportFragmentInjector\nimport javax.inject.Inject\n\n/**\n * Created by celineheldner on 07.03.18.\n */\nopen class BaseActivtiy : AppCompatActivity(), HasSupportFragmentInjector {\n\n    @Inject\n    lateinit var dispatchingAndroidInjector: DispatchingAndroidInjector<Fragment>\n\n\n    override fun supportFragmentInjector() = dispatchingAndroidInjector\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/features/BaseActivtiy.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/features/BaseActivtiy.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.features
+package ch.zuehlke.reddit.features
 
 import android.arch.lifecycle.ViewModelProvider
 import android.support.v4.app.Fragment
Index: app/src/prod/java/ch/zuehlke/reddit/di/AppModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.di\n\nimport android.app.Application\nimport android.content.Context\nimport ch.zuehlke.sbb.reddit.data.source.RedditRepository\nimport ch.zuehlke.sbb.reddit.data.source.RemoteDataMapper\nimport ch.zuehlke.sbb.reddit.data.source.local.RedditNewsLocalDataSource\nimport ch.zuehlke.sbb.reddit.data.source.remote.RedditAPI\nimport ch.zuehlke.sbb.reddit.data.source.remote.RedditElementTypeAdapterFactory\nimport ch.zuehlke.sbb.reddit.data.source.remote.RedditNewsDataRemoteDataSource\nimport ch.zuehlke.sbb.reddit.data.source.remote.model.posts.RedditPostElement\nimport com.google.common.base.Preconditions\nimport com.google.gson.Gson\nimport com.google.gson.GsonBuilder\nimport com.google.gson.reflect.TypeToken\nimport dagger.Module\nimport dagger.Provides\nimport okhttp3.OkHttpClient\nimport okhttp3.logging.HttpLoggingInterceptor\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\nimport java.lang.reflect.Modifier\nimport java.lang.reflect.Type\nimport javax.inject.Singleton\n\n/**\n * Created by celineheldner on 28.02.18.\n */\n@Module\nclass AppModule(){\n\n    private val REDDIT_END_POINT = \"https://www.reddit.com/r/kotlin/\"\n\n    @Provides\n    fun provideContext(app: Application): Context {\n        return app\n    }\n\n    @Provides\n    @Singleton\n    fun provideGson() = GsonBuilder()\n            .registerTypeAdapterFactory(RedditElementTypeAdapterFactory.elementTypeAdapterFactory)\n            .create()\n\n    @Provides\n    @Singleton\n    fun provideType() = object : TypeToken<List<RedditPostElement>>() {}.type\n\n    @Provides\n    @Singleton\n    fun provideRemoteMapper(gson: Gson, type: Type) = RemoteDataMapper.getInstance(gson, type)\n\n    @Provides\n    @Singleton\n    fun provideRetrofit(): RedditAPI {\n        val gson = GsonBuilder()\n                .excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC)\n                .excludeFieldsWithoutExposeAnnotation()\n                .registerTypeAdapterFactory(RedditElementTypeAdapterFactory.elementTypeAdapterFactory)\n                .create()\n\n        val interceptor = HttpLoggingInterceptor()\n        interceptor.setLevel(HttpLoggingInterceptor.Level.BODY)\n        val client = OkHttpClient.Builder().addInterceptor(interceptor).build()\n\n\n        return Retrofit.Builder()\n                .baseUrl(REDDIT_END_POINT)\n                .client(client)\n                .addConverterFactory(GsonConverterFactory.create(gson))\n                .build().create<RedditAPI>(RedditAPI::class.java)\n    }\n\n    @Provides\n    @Singleton\n    fun provideRedditRemoteDataSource(context: Context, redditAPI: RedditAPI, dataMapper: RemoteDataMapper) = RedditNewsDataRemoteDataSource(context,redditAPI,dataMapper)\n\n    @Provides\n    @Singleton\n    fun provideRedditLocalDataSource(context: Context) = RedditNewsLocalDataSource(context)\n\n\n    @Provides\n    @Singleton\n    fun provideRedditNewsRepository(context: Context, redditNewsDataRemoteDataSource: RedditNewsDataRemoteDataSource, redditNewsLocalDataSource: RedditNewsLocalDataSource): RedditRepository {\n        Preconditions.checkNotNull(context)\n        return RedditRepository(redditNewsDataRemoteDataSource,\n                redditNewsLocalDataSource, context)\n    }\n    \n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/prod/java/ch/zuehlke/reddit/di/AppModule.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/prod/java/ch/zuehlke/reddit/di/AppModule.kt	(revision )
@@ -1,14 +1,14 @@
-package ch.zuehlke.sbb.reddit.di
+package ch.zuehlke.reddit.di
 
 import android.app.Application
 import android.content.Context
-import ch.zuehlke.sbb.reddit.data.source.RedditRepository
-import ch.zuehlke.sbb.reddit.data.source.RemoteDataMapper
-import ch.zuehlke.sbb.reddit.data.source.local.RedditNewsLocalDataSource
-import ch.zuehlke.sbb.reddit.data.source.remote.RedditAPI
-import ch.zuehlke.sbb.reddit.data.source.remote.RedditElementTypeAdapterFactory
-import ch.zuehlke.sbb.reddit.data.source.remote.RedditNewsDataRemoteDataSource
-import ch.zuehlke.sbb.reddit.data.source.remote.model.posts.RedditPostElement
+import ch.zuehlke.reddit.data.source.RedditRepository
+import ch.zuehlke.reddit.data.source.RemoteDataMapper
+import ch.zuehlke.reddit.data.source.local.RedditNewsLocalDataSource
+import ch.zuehlke.reddit.data.source.remote.RedditAPI
+import ch.zuehlke.reddit.data.source.remote.RedditElementTypeAdapterFactory
+import ch.zuehlke.reddit.data.source.remote.RedditNewsDataRemoteDataSource
+import ch.zuehlke.reddit.data.source.remote.model.posts.RedditPostElement
 import com.google.common.base.Preconditions
 import com.google.gson.Gson
 import com.google.gson.GsonBuilder
Index: app/src/main/java/ch/zuehlke/reddit/features/news/overview/adapter/impl/LoadingDelegateAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.features.news.overview.adapter.impl\n\nimport android.support.v7.widget.RecyclerView\nimport android.view.LayoutInflater\nimport android.view.ViewGroup\n\nimport ch.zuehlke.sbb.reddit.R\nimport ch.zuehlke.sbb.reddit.features.news.overview.adapter.ViewType\nimport ch.zuehlke.sbb.reddit.features.news.overview.adapter.ViewTypeDelegateAdapter\n\n/**\n * Created by chsc on 12.11.17.\n */\n\nclass LoadingDelegateAdapter : ViewTypeDelegateAdapter {\n\n\n    override fun onCreateViewHolder(parent: ViewGroup): RecyclerView.ViewHolder {\n        return LoadingViewHolder(parent)\n    }\n\n    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, type: ViewType) {\n\n    }\n\n\n    private inner class LoadingViewHolder(parent: ViewGroup) : RecyclerView.ViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.item_loading, parent, false))\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/features/news/overview/adapter/impl/LoadingDelegateAdapter.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/features/news/overview/adapter/impl/LoadingDelegateAdapter.kt	(revision )
@@ -1,12 +1,12 @@
-package ch.zuehlke.sbb.reddit.features.news.overview.adapter.impl
+package ch.zuehlke.reddit.features.news.overview.adapter.impl
 
 import android.support.v7.widget.RecyclerView
 import android.view.LayoutInflater
 import android.view.ViewGroup
 
-import ch.zuehlke.sbb.reddit.R
-import ch.zuehlke.sbb.reddit.features.news.overview.adapter.ViewType
-import ch.zuehlke.sbb.reddit.features.news.overview.adapter.ViewTypeDelegateAdapter
+import ch.zuehlke.reddit.R
+import ch.zuehlke.reddit.features.news.overview.adapter.ViewType
+import ch.zuehlke.reddit.features.news.overview.adapter.ViewTypeDelegateAdapter
 
 /**
  * Created by chsc on 12.11.17.
Index: app/src/test/java/ch/zuehlke/reddit/data/source/remote/model/posts/RedditPostRedditElementTypeAdapterFactoryTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.data.source.remote.model.posts\n\nimport ch.zuehlke.reddit.AbstractTestCase\nimport ch.zuehlke.sbb.reddit.data.source.remote.RedditElementTypeAdapterFactory.Companion.elementTypeAdapterFactory\nimport com.google.gson.GsonBuilder\nimport com.google.gson.reflect.TypeToken\nimport junit.framework.Assert\nimport org.junit.Test\nimport java.io.IOException\n\n\n/**\n * Created by chsc on 13.11.17.\n */\nclass RedditPostRedditElementTypeAdapterFactoryTest : AbstractTestCase() {\n\n    @Test\n    @Throws(IOException::class)\n    fun parseComments() {\n        val jsonFile = readJsonFile(\"reddit_comments.json\")\n        Assert.assertNotNull(jsonFile)\n\n        val redditPostElements = gson.fromJson<List<RedditPostElement>>(jsonFile, type)\n        Assert.assertEquals(2, redditPostElements.size)\n        Assert.assertTrue(redditPostElements[1] is RedditPostElement.DataRedditPostElement)\n        val element = redditPostElements[1] as RedditPostElement.DataRedditPostElement\n        Assert.assertEquals(33, element.data!!.children!!.size)\n        dump(redditPostElements)\n\n    }\n\n    companion object {\n\n\n        private val type = object : TypeToken<List<RedditPostElement>>() {\n\n        }.type\n\n\n        private val gson = GsonBuilder()\n                .registerTypeAdapterFactory(elementTypeAdapterFactory)\n                .create()\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/test/java/ch/zuehlke/reddit/data/source/remote/model/posts/RedditPostRedditElementTypeAdapterFactoryTest.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/test/java/ch/zuehlke/reddit/data/source/remote/model/posts/RedditPostRedditElementTypeAdapterFactoryTest.kt	(revision )
@@ -1,7 +1,7 @@
-package ch.zuehlke.sbb.reddit.data.source.remote.model.posts
+package ch.zuehlke.reddit.data.source.remote.model.posts
 
 import ch.zuehlke.reddit.AbstractTestCase
-import ch.zuehlke.sbb.reddit.data.source.remote.RedditElementTypeAdapterFactory.Companion.elementTypeAdapterFactory
+import ch.zuehlke.reddit.data.source.remote.RedditElementTypeAdapterFactory.Companion.elementTypeAdapterFactory
 import com.google.gson.GsonBuilder
 import com.google.gson.reflect.TypeToken
 import junit.framework.Assert
Index: app/src/main/java/ch/zuehlke/reddit/data/source/remote/RedditElementTypeAdapterFactory.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.data.source.remote\n\nimport com.google.gson.Gson\nimport com.google.gson.TypeAdapter\nimport com.google.gson.TypeAdapterFactory\nimport com.google.gson.reflect.TypeToken\nimport com.google.gson.stream.JsonReader\nimport com.google.gson.stream.JsonToken\nimport com.google.gson.stream.JsonWriter\nimport com.google.gson.stream.MalformedJsonException\n\nimport java.io.IOException\n\nimport ch.zuehlke.sbb.reddit.data.source.remote.model.posts.RedditPostElement\nimport ch.zuehlke.sbb.reddit.data.source.remote.model.posts.RedditPostElement.Companion.reference\n\n\n/**\n * Created by chsc on 13.11.17.\n */\n\nclass RedditElementTypeAdapterFactory private constructor() : TypeAdapterFactory {\n\n    @SuppressWarnings(\"unchecked\")\n    override fun <T> create(gson: Gson, typeToken: TypeToken<T>): TypeAdapter<T>? {\n        // Not the RedditPostElement class?\n        if (!RedditPostElement::class.java.isAssignableFrom(typeToken.rawType)) {\n            // Then just let Gson pick up the next best type adapter\n            return null\n        }\n        //\n        val dataElementTypeAdapter = gson.getDelegateAdapter<RedditPostElement.DataRedditPostElement>(this, dateElementTypeToken)\n        val typeAdapter = ElementTypeAdapter(dataElementTypeAdapter) as TypeAdapter<T>\n        return typeAdapter.nullSafe()\n    }\n\n    private class ElementTypeAdapter  constructor(private val dataTypeAdapter: TypeAdapter<RedditPostElement.DataRedditPostElement>) : TypeAdapter<RedditPostElement>() {\n\n        @Throws(IOException::class)\n        override fun write(out: JsonWriter, value: RedditPostElement) {\n            if (value is RedditPostElement.DataRedditPostElement) {\n                dataTypeAdapter.write(out, value)\n            } else if (value is RedditPostElement.ReferenceRedditPostElement) {\n                out.value(value.reference)\n            } else {\n                throw AssertionError(value.javaClass)\n            }\n        }\n\n        @Throws(IOException::class)\n        override fun read(`in`: JsonReader): RedditPostElement {\n            val token = `in`.peek()\n            when (token) {\n                JsonToken.BEGIN_OBJECT -> return dataTypeAdapter.read(`in`)\n                JsonToken.STRING -> return reference(`in`.nextString())\n                JsonToken.BEGIN_ARRAY, JsonToken.END_ARRAY, JsonToken.END_OBJECT, JsonToken.NAME, JsonToken.NUMBER, JsonToken.BOOLEAN, JsonToken.NULL, JsonToken.END_DOCUMENT -> throw MalformedJsonException(\"Cannot parse $token at $`in`\")\n                else ->\n                    // If someday there are more tokens...\n                    throw AssertionError(token)\n            }\n        }\n\n    }\n\n    companion object {\n\n        // Effectively a singleton, no state, fully thread-safe, etc\n        // So just return the single instance and hide away the way it's instantiated\n        val elementTypeAdapterFactory: TypeAdapterFactory = RedditElementTypeAdapterFactory()\n\n        private val dateElementTypeToken = object : TypeToken<RedditPostElement.DataRedditPostElement>() {\n\n        }\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/data/source/remote/RedditElementTypeAdapterFactory.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/data/source/remote/RedditElementTypeAdapterFactory.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.data.source.remote
+package ch.zuehlke.reddit.data.source.remote
 
 import com.google.gson.Gson
 import com.google.gson.TypeAdapter
@@ -11,8 +11,8 @@
 
 import java.io.IOException
 
-import ch.zuehlke.sbb.reddit.data.source.remote.model.posts.RedditPostElement
-import ch.zuehlke.sbb.reddit.data.source.remote.model.posts.RedditPostElement.Companion.reference
+import ch.zuehlke.reddit.data.source.remote.model.posts.RedditPostElement
+import ch.zuehlke.reddit.data.source.remote.model.posts.RedditPostElement.Companion.reference
 
 
 /**
Index: app/src/main/res/layout/fragment_overview.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ch.zuehlke.sbb.reddit.features.news.overview.ScrollChildSwipeRefreshLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:id=\"@+id/refreshLayout\"\n    >\n\n    <android.support.v7.widget.RecyclerView\n        android:id=\"@+id/redditNewsView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n    </android.support.v7.widget.RecyclerView>\n\n    <RelativeLayout\n        android:layout_height=\"match_parent\"\n        android:layout_width=\"match_parent\"\n        android:id=\"@+id/noRedditNewsView\"\n        >\n        <TextView\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_centerInParent=\"true\"\n            android:text=\"@string/overview_screen_no_reddit_news\"\n            android:textAppearance=\"@style/TextAppearance.AppCompat.Title\"\n            android:gravity=\"center_vertical\"\n            />\n\n    </RelativeLayout>\n\n\n\n</ch.zuehlke.sbb.reddit.features.news.overview.ScrollChildSwipeRefreshLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_overview.xml	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/res/layout/fragment_overview.xml	(revision )
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="utf-8"?>
-<ch.zuehlke.sbb.reddit.features.news.overview.ScrollChildSwipeRefreshLayout
+<ch.zuehlke.reddit.features.news.overview.ScrollChildSwipeRefreshLayout
     xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:id="@+id/refreshLayout"
@@ -29,4 +29,4 @@
 
 
 
-</ch.zuehlke.sbb.reddit.features.news.overview.ScrollChildSwipeRefreshLayout>
\ No newline at end of file
+</ch.zuehlke.reddit.features.news.overview.ScrollChildSwipeRefreshLayout>
\ No newline at end of file
Index: app/src/main/java/ch/zuehlke/reddit/features/news/detail/DetailFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.features.news.detail\n\nimport android.arch.lifecycle.Observer\nimport android.arch.lifecycle.ViewModelProvider\nimport android.arch.lifecycle.ViewModelProviders\nimport android.os.Bundle\nimport android.support.design.widget.Snackbar\nimport android.support.v4.app.Fragment\nimport android.support.v4.content.ContextCompat\nimport android.support.v7.widget.LinearLayoutManager\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport ch.zuehlke.sbb.reddit.R\nimport ch.zuehlke.sbb.reddit.di.Injectable\nimport ch.zuehlke.sbb.reddit.features.news.NewsViewModel\nimport ch.zuehlke.sbb.reddit.models.RedditPostsData\nimport kotlinx.android.synthetic.main.fragment_detail.*\nimport javax.inject.Inject\n\n\n/**\n * Created by chsc on 13.11.17.\n */\n\nclass DetailFragment: Fragment(), Injectable {\n\n\n    private var mAdapter: DetailAdapter? = null\n\n    @Inject\n    lateinit var viewModelFactory: ViewModelProvider.Factory\n\n    companion object {\n\n        private val TAG = \"DetailFragment\"\n\n        fun newInstance(): DetailFragment {\n            val detailFragment = DetailFragment()\n            return detailFragment\n        }\n    }\n\n\n    override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?, savedInstanceState: Bundle?): View? =\n            inflater!!.inflate(R.layout.fragment_detail, container, false)\n\n    override fun onViewCreated(view: View?, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        redditPostView.apply{\n            layoutManager = LinearLayoutManager(context)\n            adapter = mAdapter\n            setHasFixedSize(true)\n        }\n\n        //val newsFactory: NewsViewModelFactory = NewsViewModelFactory(redditRepository = Injection.provideRedditNewsRepository(activity))\n        val newsViewModel = ViewModelProviders.of(activity, viewModelFactory).get(NewsViewModel::class.java)\n\n        // Set up progress indicator\n        refreshLayout.apply {\n            setColorSchemeColors(\n                    ContextCompat.getColor(activity, R.color.colorPrimary),\n                    ContextCompat.getColor(activity, R.color.colorAccent),\n                    ContextCompat.getColor(activity, R.color.colorPrimaryDark)\n            )\n            setScrollUpChild(redditPostView)\n            setOnRefreshListener { newsViewModel.loadRedditPosts() }\n        }\n\n        newsViewModel.loadRedditPosts()\n\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        mAdapter = DetailAdapter(context)\n    }\n\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\n        super.onActivityCreated(savedInstanceState)\n        //val newsFactory: NewsViewModelFactory = NewsViewModelFactory(redditRepository = Injection.provideRedditNewsRepository(activity))\n        val newsViewModel = ViewModelProviders.of(activity, viewModelFactory).get(NewsViewModel::class.java)\n\n        newsViewModel.redditPostData.observe(this, Observer { posts: List<RedditPostsData>? ->\n            posts?.let {\n                mAdapter?.clearAndAddPosts(it)\n            }\n         })\n\n        newsViewModel.viewState.observe(this, Observer {\n            viewstate: NewsViewModel.ViewState? -> handleViewState(viewstate)\n        })\n\n    }\n\n    fun handleViewState(viewState: NewsViewModel.ViewState?){\n        when(viewState){\n            NewsViewModel.ViewState.LOADING -> refreshLayout.isRefreshing = true\n            NewsViewModel.ViewState.NONE -> refreshLayout.isRefreshing = false\n            NewsViewModel.ViewState.NO_DATA_AVAILABLE -> {\n                refreshLayout.isRefreshing = false\n                Snackbar.make(view!!, R.string.overview_screen_error_loading_reddit_posts, Snackbar.LENGTH_LONG)\n            }\n            else -> {\n                refreshLayout.isRefreshing = false\n                Snackbar.make(view!!, R.string.overview_screen_error_loading_reddit_posts, Snackbar.LENGTH_LONG)\n            }\n        }\n    }\n\n\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/features/news/detail/DetailFragment.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/features/news/detail/DetailFragment.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.features.news.detail
+package ch.zuehlke.reddit.features.news.detail
 
 import android.arch.lifecycle.Observer
 import android.arch.lifecycle.ViewModelProvider
@@ -11,10 +11,10 @@
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
-import ch.zuehlke.sbb.reddit.R
-import ch.zuehlke.sbb.reddit.di.Injectable
-import ch.zuehlke.sbb.reddit.features.news.NewsViewModel
-import ch.zuehlke.sbb.reddit.models.RedditPostsData
+import ch.zuehlke.reddit.R
+import ch.zuehlke.reddit.di.Injectable
+import ch.zuehlke.reddit.features.news.NewsViewModel
+import ch.zuehlke.reddit.models.RedditPostsData
 import kotlinx.android.synthetic.main.fragment_detail.*
 import javax.inject.Inject
 
Index: app/src/main/java/ch/zuehlke/reddit/di/ViewModelKey.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.di\n\nimport android.arch.lifecycle.ViewModel\nimport dagger.MapKey\nimport kotlin.reflect.KClass\n\n\n/**\n * Created by celineheldner on 06.03.18.\n */\n\n@MustBeDocumented\n@Target(AnnotationTarget.FUNCTION)\n@Retention(AnnotationRetention.RUNTIME)\n@MapKey\ninternal annotation class ViewModelKey(val value: KClass<out ViewModel>)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/di/ViewModelKey.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/di/ViewModelKey.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.di
+package ch.zuehlke.reddit.di
 
 import android.arch.lifecycle.ViewModel
 import dagger.MapKey
Index: app/src/main/java/ch/zuehlke/reddit/features/news/overview/adapter/impl/RedditNewsDelegateAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.features.news.overview.adapter.impl\n\nimport android.content.Context\nimport android.support.v7.widget.RecyclerView\nimport android.view.LayoutInflater\nimport android.view.ViewGroup\nimport android.widget.ImageView\nimport android.widget.TextView\n\nimport com.google.common.base.Strings\nimport com.squareup.picasso.Picasso\n\nimport ch.zuehlke.sbb.reddit.R\nimport ch.zuehlke.sbb.reddit.features.news.overview.adapter.ViewType\nimport ch.zuehlke.sbb.reddit.features.news.overview.adapter.ViewTypeDelegateAdapter\nimport ch.zuehlke.sbb.reddit.models.RedditNewsData\nimport ch.zuehlke.sbb.reddit.util.DateUtils\n\n/**\n * Created by chsc on 12.11.17.\n */\n\nclass RedditNewsDelegateAdapter(private val mListener: RedditNewsDelegateAdapter.OnNewsSelectedListener) : ViewTypeDelegateAdapter {\n\n    interface OnNewsSelectedListener {\n        fun onNewsSelected(url: String)\n    }\n\n    override fun onCreateViewHolder(parent: ViewGroup): RecyclerView.ViewHolder {\n        return RedditNewsViewHolder(parent, parent.context)\n    }\n\n    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, item: ViewType) {\n        if (holder is RedditNewsViewHolder) {\n            holder.bind(item as RedditNewsData)\n        }\n    }\n\n\n    inner class RedditNewsViewHolder(parent: ViewGroup, private val mContext: Context) : RecyclerView.ViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.item_overview, parent, false)) {\n\n        private val mThumbnail = itemView.findViewById<ImageView>(R.id.thumbnail)\n        private val mTitle = itemView.findViewById<TextView>(R.id.description)\n        private val mAuthor = itemView.findViewById<TextView>(R.id.author)\n        private val mComments = itemView.findViewById<TextView>(R.id.comments)\n        private val mTime = itemView.findViewById<TextView>(R.id.time)\n\n        fun bind(data: RedditNewsData) {\n            mComments.text = data.numberOfComments.toString()\n            mAuthor.text = data.author\n            mTitle.text = data.title\n            mTime.text = DateUtils.friendlyTime(data.created)\n            if (Strings.isNullOrEmpty(data.thumbnailUrl)) {\n                Picasso.with(mContext).load(R.drawable.reddit_placeholder).into(mThumbnail)\n            } else {\n                Picasso.with(mContext).load(data.thumbnailUrl).into(mThumbnail)\n            }\n\n            super.itemView.setOnClickListener { mListener.onNewsSelected(data.permaLink!!) }\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/features/news/overview/adapter/impl/RedditNewsDelegateAdapter.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/features/news/overview/adapter/impl/RedditNewsDelegateAdapter.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.features.news.overview.adapter.impl
+package ch.zuehlke.reddit.features.news.overview.adapter.impl
 
 import android.content.Context
 import android.support.v7.widget.RecyclerView
@@ -10,11 +10,11 @@
 import com.google.common.base.Strings
 import com.squareup.picasso.Picasso
 
-import ch.zuehlke.sbb.reddit.R
-import ch.zuehlke.sbb.reddit.features.news.overview.adapter.ViewType
-import ch.zuehlke.sbb.reddit.features.news.overview.adapter.ViewTypeDelegateAdapter
-import ch.zuehlke.sbb.reddit.models.RedditNewsData
-import ch.zuehlke.sbb.reddit.util.DateUtils
+import ch.zuehlke.reddit.R
+import ch.zuehlke.reddit.features.news.overview.adapter.ViewType
+import ch.zuehlke.reddit.features.news.overview.adapter.ViewTypeDelegateAdapter
+import ch.zuehlke.reddit.models.RedditNewsData
+import ch.zuehlke.reddit.util.DateUtils
 
 /**
  * Created by chsc on 12.11.17.
Index: app/src/main/java/ch/zuehlke/reddit/features/news/detail/DetailAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.features.news.detail\n\nimport android.content.Context\nimport android.support.v7.widget.RecyclerView\nimport android.util.TypedValue\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.TextView\n\nimport java.util.ArrayList\n\nimport ch.zuehlke.sbb.reddit.R\nimport ch.zuehlke.sbb.reddit.models.RedditPostsData\nimport ch.zuehlke.sbb.reddit.util.DateUtils\n\n/**\n * Created by chsc on 13.11.17.\n */\n\nclass DetailAdapter(private val mContext: Context) : RecyclerView.Adapter<DetailAdapter.DetailViewHolder>() {\n\n\n    private val mItems = ArrayList<RedditPostsData>()\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): DetailViewHolder {\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_detail, parent, false)\n        return DetailViewHolder(view)\n    }\n\n    override fun onBindViewHolder(holder: DetailViewHolder, position: Int) {\n        val post = mItems[position]\n\n        holder.mUsername.text = post.author\n        holder.mText.text = post.body\n        holder.mCreated.text = DateUtils.friendlyTime(post.createdUtc)\n        setDepthPadding(holder.itemView, post.depth)\n    }\n\n    fun clearAndAddPosts(newsData: List<RedditPostsData>) {\n        val previousItemSize = mItems.size\n        mItems.clear()\n        notifyItemRangeRemoved(0, previousItemSize)\n        mItems.addAll(newsData)\n        notifyDataSetChanged()\n\n    }\n\n    override fun getItemCount(): Int {\n        return mItems.size\n    }\n\n    private fun setDepthPadding(view: View, depth: Int) {\n        val normalPadding = 5f\n        val leftPadding = normalPadding + depth * 10f\n\n        val normalDp = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, normalPadding, mContext.resources.displayMetrics).toInt()\n        val leftDp = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, leftPadding, mContext.resources.displayMetrics).toInt()\n        view.setPadding(leftDp, normalDp, normalDp, normalDp)\n    }\n\n     class DetailViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\n\n         val mUsername: TextView\n         val mCreated: TextView\n         val mText: TextView\n\n        init {\n            mUsername = itemView.findViewById<TextView>(R.id.username)\n            mCreated = itemView.findViewById<TextView>(R.id.created)\n            mText = itemView.findViewById<TextView>(R.id.text)\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/features/news/detail/DetailAdapter.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/features/news/detail/DetailAdapter.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.features.news.detail
+package ch.zuehlke.reddit.features.news.detail
 
 import android.content.Context
 import android.support.v7.widget.RecyclerView
@@ -10,9 +10,9 @@
 
 import java.util.ArrayList
 
-import ch.zuehlke.sbb.reddit.R
-import ch.zuehlke.sbb.reddit.models.RedditPostsData
-import ch.zuehlke.sbb.reddit.util.DateUtils
+import ch.zuehlke.reddit.R
+import ch.zuehlke.reddit.models.RedditPostsData
+import ch.zuehlke.reddit.util.DateUtils
 
 /**
  * Created by chsc on 13.11.17.
Index: app/src/main/java/ch/zuehlke/reddit/di/ActivityModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.di\n\nimport ch.zuehlke.sbb.reddit.di.scope.ActivityScope\nimport ch.zuehlke.sbb.reddit.features.BaseActivtiy\nimport ch.zuehlke.sbb.reddit.features.login.LoginActivity\nimport ch.zuehlke.sbb.reddit.features.news.NewsActivity\nimport dagger.Module\nimport dagger.android.ContributesAndroidInjector\n\n/**\n * Created by celineheldner on 28.02.18.\n */\n@Module\nabstract class ActivityModule(){\n\n    @ContributesAndroidInjector(modules = arrayOf(FragmentBuilderModule::class))\n    @ActivityScope\n    abstract fun contributeBaseActivity() : BaseActivtiy\n\n    @ContributesAndroidInjector(modules = arrayOf(FragmentBuilderModule::class))\n    @ActivityScope\n    abstract fun contributeLoginActivity() : LoginActivity\n\n    @ContributesAndroidInjector(modules = arrayOf(FragmentBuilderModule::class))\n    @ActivityScope\n    abstract fun contributeNewsActivity() : NewsActivity\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/di/ActivityModule.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/di/ActivityModule.kt	(revision )
@@ -1,9 +1,9 @@
-package ch.zuehlke.sbb.reddit.di
+package ch.zuehlke.reddit.di
 
-import ch.zuehlke.sbb.reddit.di.scope.ActivityScope
-import ch.zuehlke.sbb.reddit.features.BaseActivtiy
-import ch.zuehlke.sbb.reddit.features.login.LoginActivity
-import ch.zuehlke.sbb.reddit.features.news.NewsActivity
+import ch.zuehlke.reddit.di.scope.ActivityScope
+import ch.zuehlke.reddit.features.BaseActivtiy
+import ch.zuehlke.reddit.features.login.LoginActivity
+import ch.zuehlke.reddit.features.news.NewsActivity
 import dagger.Module
 import dagger.android.ContributesAndroidInjector
 
Index: app/src/main/java/ch/zuehlke/reddit/data/source/remote/model/news/RedditNewsAPIChildrenResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.data.source.remote.model.news\n\nimport com.google.gson.annotations.Expose\n\n/**\n * Created by chsc on 12.11.17.\n */\n\nclass RedditNewsAPIChildrenResponse {\n\n    @Expose\n    var kind: String? = null\n\n    @Expose\n    var data: RedditNewsAPIChildrenResponseData? = null\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/data/source/remote/model/news/RedditNewsAPIChildrenResponse.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/data/source/remote/model/news/RedditNewsAPIChildrenResponse.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.data.source.remote.model.news
+package ch.zuehlke.reddit.data.source.remote.model.news
 
 import com.google.gson.annotations.Expose
 
Index: app/src/main/java/ch/zuehlke/reddit/data/source/remote/RedditNewsDataRemoteDataSource.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.data.source.remote\n\nimport android.content.Context\nimport android.util.Log\nimport ch.zuehlke.sbb.reddit.data.source.RedditDataSource\nimport ch.zuehlke.sbb.reddit.data.source.RemoteDataMapper\nimport ch.zuehlke.sbb.reddit.data.source.remote.model.news.RedditNewsAPIResponse\nimport ch.zuehlke.sbb.reddit.models.RedditNewsData\nimport ch.zuehlke.sbb.reddit.models.RedditPostsData\nimport com.google.common.base.Preconditions.checkNotNull\nimport com.google.gson.Gson\nimport okhttp3.ResponseBody\nimport retrofit2.Call\nimport retrofit2.Callback\nimport retrofit2.Response\nimport java.util.*\nimport javax.inject.Inject\n\n\n/**\n * Created by chsc on 08.11.17.\n */\n\nclass RedditNewsDataRemoteDataSource\n@Inject constructor(context: Context, redditAPI: RedditAPI, dataMapper: RemoteDataMapper) : RedditDataSource {\n    private var after = \"\"\n    private var order = -1\n    private val mRedditAPI: RedditAPI\n    private val mDataMapper: RemoteDataMapper\n    private val TAG = \"RemoteDataSource\"\n\n\n    init {\n        checkNotNull(context)\n        mRedditAPI = checkNotNull(redditAPI, \"The reddit api cannot be null\")\n        mDataMapper = dataMapper\n\n    }\n\n\n\n    override fun getMoreNews(callback: RedditDataSource.LoadNewsCallback) {\n        val call = mRedditAPI.getSortedNews(\"hot\", after, \"10\")\n        call.enqueue(object : Callback<RedditNewsAPIResponse> {\n            override fun onResponse(call: Call<RedditNewsAPIResponse>, response: Response<RedditNewsAPIResponse>) {\n                after = response.body().data!!.after!!\n                Log.i(TAG, \"Recieved reddit response: \" + response.body())\n                Log.i(TAG,Gson().toJson(response.body()))\n                val redditNewsDataList = ArrayList<RedditNewsData>()\n                for (child in response.body().data!!.children!!) {\n                    val data = child.data\n                    Log.i(TAG, \"child date: \" + Date(data!!.created))\n                    data.let {\n                        redditNewsDataList.add(RedditNewsData(data.author!!, data.title!!, data.num_comments, data.created, data.thumbnail!!, data.url!!, data.id!!, data.permalink!!))\n\n                    }\n                     }\n                callback.onNewsLoaded(redditNewsDataList)\n            }\n\n            override fun onFailure(call: Call<RedditNewsAPIResponse>, t: Throwable) {\n                Log.e(TAG, \"Error while requesting reddit news: \", t)\n                callback.onDataNotAvailable()\n            }\n        })\n    }\n\n    override fun getNews(callback: RedditDataSource.LoadNewsCallback) {\n\n\n        val call = mRedditAPI.getSortedNews(\"hot\", \"\", \"10\")\n        call.enqueue(object : Callback<RedditNewsAPIResponse> {\n            override fun onResponse(call: Call<RedditNewsAPIResponse>, response: Response<RedditNewsAPIResponse>) {\n                after = response.body().data!!.after!!\n                Log.i(TAG, \"Recieved reddit response: \" + response.body())\n                val redditNewsDataList = ArrayList<RedditNewsData>()\n                for (child in response.body().data!!.children!!) {\n                    val data = child.data\n                    data?.let {\n                        redditNewsDataList.add(RedditNewsData(data.author!!, data.title!!, data.num_comments, data.created, data.thumbnail!!, data.url!!, data.id!!, data.permalink!!))\n                    }\n\n                }\n                callback.onNewsLoaded(redditNewsDataList)\n            }\n\n            override fun onFailure(call: Call<RedditNewsAPIResponse>, t: Throwable) {\n                Log.e(TAG, \"Error while requesting reddit news: \", t)\n                callback.onDataNotAvailable()\n            }\n        })\n    }\n\n    override fun getPosts(callback: RedditDataSource.LoadPostsCallback, permalink: String) {\n        val call = mRedditAPI.getRedditPosts(permalink, \"new\")\n        call.enqueue(object : Callback<ResponseBody> {\n\n            override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {\n                Log.i(TAG,\"Got Posts from Remote!!\")\n                val elements = mDataMapper.parseResponseToPostElements(response.body())\n                order = 0\n                val redditPosts = mDataMapper.flattenRetrofitResponse(elements, permalink)\n                callback.onPostsLoaded(redditPosts)\n            }\n\n            override fun onFailure(call: Call<ResponseBody>, t: Throwable) {\n                callback.onDataNotAvailable()\n            }\n        })\n\n    }\n\n    override fun savePosts(data: RedditPostsData) {\n        //Remotly its not used\n    }\n\n    override fun deletePostsWithPermaLink(permaLink: String) {\n\n    }\n\n\n    override fun refreshNews() {\n        after = \"\"\n    }\n\n    override fun deleteAllNews() {\n        // Not supported by Reddit :)\n    }\n\n    override fun saveRedditNews(data: RedditNewsData) {\n        // In this demo app we do not support posting of news, therefore not implemented.\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/data/source/remote/RedditNewsDataRemoteDataSource.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/data/source/remote/RedditNewsDataRemoteDataSource.kt	(revision )
@@ -1,12 +1,12 @@
-package ch.zuehlke.sbb.reddit.data.source.remote
+package ch.zuehlke.reddit.data.source.remote
 
 import android.content.Context
 import android.util.Log
-import ch.zuehlke.sbb.reddit.data.source.RedditDataSource
-import ch.zuehlke.sbb.reddit.data.source.RemoteDataMapper
-import ch.zuehlke.sbb.reddit.data.source.remote.model.news.RedditNewsAPIResponse
-import ch.zuehlke.sbb.reddit.models.RedditNewsData
-import ch.zuehlke.sbb.reddit.models.RedditPostsData
+import ch.zuehlke.reddit.data.source.RedditDataSource
+import ch.zuehlke.reddit.data.source.RemoteDataMapper
+import ch.zuehlke.reddit.data.source.remote.model.news.RedditNewsAPIResponse
+import ch.zuehlke.reddit.models.RedditNewsData
+import ch.zuehlke.reddit.models.RedditPostsData
 import com.google.common.base.Preconditions.checkNotNull
 import com.google.gson.Gson
 import okhttp3.ResponseBody
Index: app/src/test/java/ch/zuehlke/reddit/AbstractTestCase.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.reddit\n\nimport java.io.BufferedReader\nimport java.io.IOException\nimport java.io.InputStreamReader\n\nimport ch.zuehlke.sbb.reddit.data.source.remote.model.posts.RedditPostElement\nimport ch.zuehlke.sbb.reddit.util.DateUtils\n\nimport com.google.common.base.Strings.repeat\nimport java.io.Reader\n\n/**\n * Created by chsc on 13.11.17.\n */\n\nabstract class AbstractTestCase {\n\n    @Throws(IOException::class)\n    protected fun readJsonFile(filename: String): String {\n\n        val br = BufferedReader(InputStreamReader(this.javaClass.getClassLoader().getResourceAsStream(filename)) as Reader?)\n        val sb = StringBuilder()\n        var line: String? = br.readLine()\n        while (line != null) {\n            sb.append(line)\n            line = br.readLine()\n        }\n\n        return sb.toString()\n    }\n\n    protected fun dump(abstractElements: Iterable<RedditPostElement>, level: Int = 0) {\n        val tab = repeat(\".\", level)\n        for (e in abstractElements) {\n            if (e is RedditPostElement.DataRedditPostElement) {\n                val dataElement = e\n                print(tab)\n                print(\"DATA=\")\n                println(dataElement.kind)\n                if (dataElement.data!!.children != null) {\n                    dump(dataElement.data!!.children!!, level + 1)\n                }\n                if (dataElement.data!!.replies != null) {\n                    val replies = dataElement.data!!.replies\n                    if (dataElement.data!!.replies is RedditPostElement.DataRedditPostElement) {\n                        dump((replies as RedditPostElement.DataRedditPostElement).data!!.children!!, level + 1)\n                    } else if (dataElement.data!!.replies is RedditPostElement.ReferenceRedditPostElement) {\n                        print(tab)\n                        print(\"REF=\")\n                        println((dataElement.data!!.replies as RedditPostElement.ReferenceRedditPostElement).reference)\n                    } else {\n                        throw AssertionError(replies!!.javaClass)\n                    }\n                }\n                if (dataElement.data!!.author != null) {\n                    print(\"Author=\")\n                    println(dataElement.data!!.author)\n                }\n\n                if (dataElement.data!!.body != null) {\n                    print(\"Body=\")\n                    println(dataElement.data!!.body)\n                }\n\n                if (dataElement.data!!.created_utc != 0L) {\n                    print(\"Created=\")\n                    println(DateUtils.friendlyTime(dataElement.data!!.created_utc))\n                }\n\n                if (dataElement.data!!.depth != 0) {\n                    print(\"Depth=\")\n                    println(\"\" + dataElement.data!!.depth)\n                }\n\n            } else if (e is RedditPostElement.ReferenceRedditPostElement) {\n                print(tab)\n                print(\"REF=\")\n                println(e.reference)\n            } else {\n                throw IllegalArgumentException(e.toString())\n            }\n        }\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/test/java/ch/zuehlke/reddit/AbstractTestCase.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/test/java/ch/zuehlke/reddit/AbstractTestCase.kt	(revision )
@@ -4,8 +4,8 @@
 import java.io.IOException
 import java.io.InputStreamReader
 
-import ch.zuehlke.sbb.reddit.data.source.remote.model.posts.RedditPostElement
-import ch.zuehlke.sbb.reddit.util.DateUtils
+import ch.zuehlke.reddit.data.source.remote.model.posts.RedditPostElement
+import ch.zuehlke.reddit.util.DateUtils
 
 import com.google.common.base.Strings.repeat
 import java.io.Reader
Index: app/src/main/java/ch/zuehlke/reddit/data/source/RedditRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.data.source\n\nimport android.content.Context\nimport android.net.ConnectivityManager\n\nimport java.util.ArrayList\nimport java.util.LinkedHashMap\n\nimport ch.zuehlke.sbb.reddit.models.RedditNewsData\nimport ch.zuehlke.sbb.reddit.models.RedditPostsData\n\nimport com.google.common.base.Preconditions.checkNotNull\nimport javax.inject.Inject\n\n/**\n * Created by chsc on 08.11.17.\n */\n\nclass RedditRepository\n@Inject constructor(newsRemoteDataSource: RedditDataSource,\n                    newsLocalDataSource: RedditDataSource, private val mContext: Context) : RedditDataSource {\n\n    companion object {\n\n        private val COMMENT_SECION = \"comments/\"\n\n    }\n\n    private val mRedditNewsRemoteDataSource: RedditDataSource\n\n    private val mRedditNewsLocalDataSource: RedditDataSource\n\n    /**\n     * This variable has package local visibility so it can be accessed from tests.\n     */\n    internal var mCacheNews: MutableMap<String, RedditNewsData>? = null\n\n    /**\n     * Marks the cache as invalid, to force an update the next time redditPost is requested. This variable\n     * has package local visibility so it can be accessed from tests.\n     */\n    internal var mCacheIsDirty = false\n\n\n    init {\n        mRedditNewsRemoteDataSource = checkNotNull(newsRemoteDataSource)\n        mRedditNewsLocalDataSource = checkNotNull(newsLocalDataSource)\n    }\n\n\n    override fun getMoreNews(callback: RedditDataSource.LoadNewsCallback) {\n        checkNotNull(callback)\n        addNewsFromRemoteDataSource(callback)\n    }\n\n    private fun addNewsFromRemoteDataSource(callback: RedditDataSource.LoadNewsCallback) {\n        mRedditNewsRemoteDataSource.getMoreNews(object : RedditDataSource.LoadNewsCallback {\n            override fun onNewsLoaded(news: List<RedditNewsData>) {\n                refreshCache(news)\n                updateLocalDataSource(news)\n                callback.onNewsLoaded(ArrayList(mCacheNews!!.values))\n            }\n\n            override fun onDataNotAvailable() {\n                callback.onDataNotAvailable()\n            }\n        })\n    }\n\n    private val isNetworkAvailable: Boolean\n        get() {\n            val connectivityManager = mContext.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\n            val activeNetworkInfo = connectivityManager.activeNetworkInfo\n            return activeNetworkInfo != null && activeNetworkInfo.isConnected\n        }\n\n    override fun getNews(callback: RedditDataSource.LoadNewsCallback) {\n        checkNotNull(callback)\n\n        mRedditNewsRemoteDataSource.refreshNews()\n        // Respond immediately with cache if available and not dirty\n        if (mCacheNews != null && !mCacheIsDirty) {\n            callback.onNewsLoaded(ArrayList(mCacheNews!!.values))\n            return\n        }\n\n        if (!isNetworkAvailable) {\n            // Query the local storage if available. If not, query the network.\n            mRedditNewsLocalDataSource.getNews(object : RedditDataSource.LoadNewsCallback {\n                override fun onNewsLoaded(news: List<RedditNewsData>) {\n                    refreshCache(news)\n                    callback.onNewsLoaded(ArrayList(mCacheNews!!.values))\n                }\n\n                override fun onDataNotAvailable() {\n                    callback.onDataNotAvailable()\n                }\n            })\n\n        } else {\n            if (mCacheIsDirty) {\n                // If the cache is dirty we need to fetch new data from the network. The Cache is only dirty, when a refreshNews is going on\n                getNewsFromRemoteDataSource(object : RedditDataSource.LoadNewsCallback {\n                    override fun onNewsLoaded(news: List<RedditNewsData>) {\n                        for (newsData in news) {\n                            saveRedditNews(newsData)\n                        }\n                        refreshCache(news)\n                        callback.onNewsLoaded(ArrayList(mCacheNews!!.values))\n                    }\n\n                    override fun onDataNotAvailable() {\n                        callback.onDataNotAvailable()\n                    }\n                })\n            } else {\n                // Query the local storage if available. If not, query the network.\n                mRedditNewsLocalDataSource.getNews(object : RedditDataSource.LoadNewsCallback {\n                    override fun onNewsLoaded(news: List<RedditNewsData>) {\n                        refreshCache(news)\n                        callback.onNewsLoaded(ArrayList(mCacheNews!!.values))\n                    }\n\n                    override fun onDataNotAvailable() {\n                        getNewsFromRemoteDataSource(callback)\n                    }\n                })\n            }\n        }\n\n\n    }\n\n    override fun getPosts(callback: RedditDataSource.LoadPostsCallback, permalink: String) {\n        val convertedPermaLink = convertURLToRemote(permalink)\n        mRedditNewsLocalDataSource.getPosts(object : RedditDataSource.LoadPostsCallback {\n            override fun onPostsLoaded(posts: List<RedditPostsData>) {\n                callback.onPostsLoaded(posts)\n            }\n\n            override fun onDataNotAvailable() {\n\n            }\n        }, convertedPermaLink)\n\n        mRedditNewsRemoteDataSource.getPosts(object : RedditDataSource.LoadPostsCallback {\n            override fun onPostsLoaded(posts: List<RedditPostsData>) {\n                mRedditNewsLocalDataSource.deletePostsWithPermaLink(convertedPermaLink)\n                for (data in posts) {\n                    mRedditNewsLocalDataSource.savePosts(data)\n                }\n                callback.onPostsLoaded(posts)\n            }\n\n            override fun onDataNotAvailable() {\n\n            }\n        }, convertedPermaLink)\n\n    }\n\n    private fun convertURLToRemote(url: String): String {\n        val parsedUrl = url.substring(url.indexOf(COMMENT_SECION) + COMMENT_SECION.length)\n        return parsedUrl.substring(0, parsedUrl.length - 1)\n    }\n\n    override fun savePosts(data: RedditPostsData) {\n\n    }\n\n    override fun deletePostsWithPermaLink(permaLink: String) {\n\n    }\n\n    override fun refreshNews() {\n        mCacheIsDirty = true\n        mRedditNewsRemoteDataSource.refreshNews()\n    }\n\n    override fun deleteAllNews() {\n        mRedditNewsRemoteDataSource.deleteAllNews() // Although we call deleteAllNews() on the remote datasource, it is not implemented.\n        mRedditNewsLocalDataSource.deleteAllNews()\n\n        if (mCacheNews == null) {\n            mCacheNews = LinkedHashMap<String, RedditNewsData>()\n        }\n        mCacheNews!!.clear()\n    }\n\n    override fun saveRedditNews(data: RedditNewsData) {\n        checkNotNull(data)\n\n        mRedditNewsLocalDataSource.saveRedditNews(data)\n        mRedditNewsRemoteDataSource.saveRedditNews(data) // Although we call saveRedditNews() on the remote datasource, it is not implemented.\n        // Do in memory cache update to keep the app UI up to date\n        if (mCacheNews == null) {\n            mCacheNews = LinkedHashMap<String, RedditNewsData>()\n        }\n        mCacheNews!!.put(data.id!!, data)\n    }\n\n    private fun getNewsFromRemoteDataSource(callback: RedditDataSource.LoadNewsCallback) {\n        mRedditNewsRemoteDataSource.getNews(object : RedditDataSource.LoadNewsCallback {\n            override fun onNewsLoaded(news: List<RedditNewsData>) {\n                refreshCache(news)\n                refreshLocalDataSource(news)\n                callback.onNewsLoaded(ArrayList(mCacheNews!!.values))\n            }\n\n            override fun onDataNotAvailable() {\n                callback.onDataNotAvailable()\n            }\n        })\n    }\n\n    private fun refreshCache(news: List<RedditNewsData>) {\n        if (mCacheNews == null) {\n            mCacheNews = LinkedHashMap<String, RedditNewsData>()\n        }\n        mCacheNews!!.clear()\n        for (data in news) {\n            mCacheNews!!.put(data.id!!, data)\n        }\n        mCacheIsDirty = false\n    }\n\n    private fun updateLocalDataSource(news: List<RedditNewsData>) {\n        for (data in news) {\n            mRedditNewsLocalDataSource.saveRedditNews(data)\n        }\n    }\n\n    private fun refreshLocalDataSource(news: List<RedditNewsData>) {\n        mRedditNewsLocalDataSource.deleteAllNews()\n        for (data in news) {\n            mRedditNewsLocalDataSource.saveRedditNews(data)\n        }\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/data/source/RedditRepository.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/data/source/RedditRepository.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.data.source
+package ch.zuehlke.reddit.data.source
 
 import android.content.Context
 import android.net.ConnectivityManager
@@ -6,8 +6,8 @@
 import java.util.ArrayList
 import java.util.LinkedHashMap
 
-import ch.zuehlke.sbb.reddit.models.RedditNewsData
-import ch.zuehlke.sbb.reddit.models.RedditPostsData
+import ch.zuehlke.reddit.models.RedditNewsData
+import ch.zuehlke.reddit.models.RedditPostsData
 
 import com.google.common.base.Preconditions.checkNotNull
 import javax.inject.Inject
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"ch.zuehlke.sbb.reddit\">\n\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n\n    <application\n        android:name=\"ch.zuehlke.reddit.RedditApp\"\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/app_logo\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/app_logo\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\">\n\n        <activity\n            android:name=\".features.login.LoginActivity\"\n            android:theme=\"@style/AppTheme.OverlapSystemBar\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n        <activity android:name=\"ch.zuehlke.reddit.features.news.NewsActivity\"></activity>\n\n    </application>\n\n\n</manifest>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/AndroidManifest.xml	(revision )
@@ -1,5 +1,5 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="ch.zuehlke.sbb.reddit">
+    package="ch.zuehlke.reddit">
 
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
Index: app/src/main/java/ch/zuehlke/reddit/features/news/overview/adapter/impl/RedditOverviewAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.features.news.overview.adapter.impl\n\nimport android.support.v7.widget.RecyclerView\nimport android.view.ViewGroup\n\nimport java.util.ArrayList\nimport java.util.HashMap\n\nimport ch.zuehlke.sbb.reddit.features.news.overview.adapter.AdapterConstants\nimport ch.zuehlke.sbb.reddit.features.news.overview.adapter.ViewType\nimport ch.zuehlke.sbb.reddit.features.news.overview.adapter.ViewTypeDelegateAdapter\nimport ch.zuehlke.sbb.reddit.models.RedditNewsData\n\n/**\n * Created by chsc on 12.11.17.\n */\n\nclass RedditOverviewAdapter(listener: RedditNewsDelegateAdapter.OnNewsSelectedListener) : RecyclerView.Adapter<RecyclerView.ViewHolder>() {\n\n    private val loadingItem = object : ViewType {\n        override val viewType: Int\n            get() = AdapterConstants.LOADING\n    }\n\n    private val mItems = ArrayList<ViewType>()\n    private val adapters = HashMap<Int, ViewTypeDelegateAdapter>()\n\n    init {\n        adapters.put(AdapterConstants.LOADING, LoadingDelegateAdapter())\n        adapters.put(AdapterConstants.NEWS, RedditNewsDelegateAdapter(listener))\n        mItems.add(loadingItem)\n    }\n\n    fun addRedditNews(newsData: List<RedditNewsData>) {\n        val initPosition = mItems.size - 1\n        mItems.removeAt(initPosition)\n        notifyItemRemoved(initPosition)\n\n        mItems.addAll(newsData)\n        mItems.add(loadingItem)\n        notifyItemRangeChanged(initPosition, mItems.size + 1 /* plus loading item */)\n    }\n\n    fun clearAndAddNews(newsData: List<RedditNewsData>) {\n        val previousItemSize = mItems.size\n        mItems.clear()\n        notifyItemRangeRemoved(0, previousItemSize)\n        mItems.addAll(newsData)\n        mItems.add(loadingItem)\n        notifyItemRangeChanged(0, newsData.size + 1 /* plus loading item */)\n\n    }\n\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\n        return adapters[viewType]!!.onCreateViewHolder(parent)\n    }\n\n    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {\n        adapters[getItemViewType(position)]!!.onBindViewHolder(holder, mItems[position])\n    }\n\n    override fun getItemCount(): Int {\n        return mItems.size\n    }\n\n    override fun getItemViewType(position: Int): Int {\n        return mItems[position].viewType\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/features/news/overview/adapter/impl/RedditOverviewAdapter.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/features/news/overview/adapter/impl/RedditOverviewAdapter.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.features.news.overview.adapter.impl
+package ch.zuehlke.reddit.features.news.overview.adapter.impl
 
 import android.support.v7.widget.RecyclerView
 import android.view.ViewGroup
@@ -6,10 +6,10 @@
 import java.util.ArrayList
 import java.util.HashMap
 
-import ch.zuehlke.sbb.reddit.features.news.overview.adapter.AdapterConstants
-import ch.zuehlke.sbb.reddit.features.news.overview.adapter.ViewType
-import ch.zuehlke.sbb.reddit.features.news.overview.adapter.ViewTypeDelegateAdapter
-import ch.zuehlke.sbb.reddit.models.RedditNewsData
+import ch.zuehlke.reddit.features.news.overview.adapter.AdapterConstants
+import ch.zuehlke.reddit.features.news.overview.adapter.ViewType
+import ch.zuehlke.reddit.features.news.overview.adapter.ViewTypeDelegateAdapter
+import ch.zuehlke.reddit.models.RedditNewsData
 
 /**
  * Created by chsc on 12.11.17.
Index: app/src/main/java/ch/zuehlke/reddit/RedditApp.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.reddit\n\nimport android.app.Activity\nimport android.app.Application\nimport ch.zuehlke.sbb.reddit.di.AppInjector\nimport dagger.android.DispatchingAndroidInjector\nimport dagger.android.HasActivityInjector\nimport javax.inject.Inject\n\n/**\n * Created by celineheldner on 12.01.18.\n */\n\nclass RedditApp : Application(), HasActivityInjector {\n\n    @Inject\n    lateinit var activityInjector: DispatchingAndroidInjector<Activity>\n\n    override fun activityInjector() = activityInjector\n\n    override fun onCreate() {\n        super.onCreate()\n        AppInjector.init(this)\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/RedditApp.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/RedditApp.kt	(revision )
@@ -2,7 +2,7 @@
 
 import android.app.Activity
 import android.app.Application
-import ch.zuehlke.sbb.reddit.di.AppInjector
+import ch.zuehlke.reddit.di.AppInjector
 import dagger.android.DispatchingAndroidInjector
 import dagger.android.HasActivityInjector
 import javax.inject.Inject
Index: app/src/main/java/ch/zuehlke/reddit/di/AppComponent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.di\n\nimport android.app.Application\nimport ch.zuehlke.reddit.RedditApp\nimport dagger.BindsInstance\nimport dagger.Component\nimport dagger.android.AndroidInjectionModule\nimport javax.inject.Singleton\n\n/**\n * Created by celineheldner on 28.02.18.\n */\n@Singleton\n@Component(modules = arrayOf(\n        AndroidInjectionModule::class,\n        AppModule::class,\n        ActivityModule::class,\n        ViewModelModule::class))\ninterface AppComponent{\n\n    fun inject(app: RedditApp)\n\n    @Component.Builder\n    interface Builder{\n        @BindsInstance\n        fun application(redditApp: Application): Builder\n        fun build(): AppComponent\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/di/AppComponent.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/di/AppComponent.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.di
+package ch.zuehlke.reddit.di
 
 import android.app.Application
 import ch.zuehlke.reddit.RedditApp
Index: app/src/main/java/ch/zuehlke/reddit/data/source/remote/model/news/RedditNewsAPIResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.data.source.remote.model.news\n\nimport com.google.gson.annotations.Expose\n\n/**\n * Created by chsc on 12.11.17.\n */\n\nclass RedditNewsAPIResponse {\n\n    @Expose\n    var data: RedditNewsAPIResponseData? = null\n    @Expose\n    var kind: String? = null\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/data/source/remote/model/news/RedditNewsAPIResponse.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/data/source/remote/model/news/RedditNewsAPIResponse.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.data.source.remote.model.news
+package ch.zuehlke.reddit.data.source.remote.model.news
 
 import com.google.gson.annotations.Expose
 
Index: app/src/mock/java/ch/zuehlke/reddit/data/FakeRedditNewsRemoteDataSource.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.data\n\nimport android.content.Context\nimport android.support.annotation.NonNull\nimport ch.zuehlke.sbb.reddit.R\nimport ch.zuehlke.sbb.reddit.data.source.RedditDataSource\nimport ch.zuehlke.sbb.reddit.data.source.RemoteDataMapper\nimport ch.zuehlke.sbb.reddit.data.source.remote.model.news.RedditNewsAPIResponse\nimport ch.zuehlke.sbb.reddit.models.RedditNewsData\nimport ch.zuehlke.sbb.reddit.models.RedditPostsData\nimport com.google.gson.Gson\nimport javax.inject.Inject\nimport kotlin.collections.ArrayList\n\n\n/**\n * Created by chsc on 08.11.17.\n */\n\nclass FakeRedditNewsRemoteDataSource\n @Inject constructor(context: Context, dataMapper: RemoteDataMapper) : RedditDataSource {\n\n    private val mContext: Context\n    private val mDataMapper: RemoteDataMapper\n    private var order = 0;\n\n    private var redditNewsDataList = ArrayList<RedditNewsData>()\n\n    init {\n        mContext = context\n        mDataMapper = dataMapper\n    }\n\n\n    override fun getMoreNews(callback: RedditDataSource.LoadNewsCallback) {\n        callback.onNewsLoaded(redditNewsDataList)\n    }\n\n    override fun getPosts(callback: RedditDataSource.LoadPostsCallback, permalink: String) {\n        val bufferedReader = mContext.resources.openRawResource(R.raw.reddit_posts).bufferedReader()\n        order = 0\n        var redditPosts: List<RedditPostsData>\n        val elements = mDataMapper.parseResponseToPostElements(bufferedReader)\n        redditPosts = mDataMapper.flattenRetrofitResponse(elements, permalink)\n        callback.onPostsLoaded(redditPosts)\n    }\n\n\n    override fun savePosts(data: RedditPostsData) {\n        TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n    }\n\n    override fun deletePostsWithPermaLink(permaLink: String) {\n        TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.\n    }\n\n\n    override fun getNews(@NonNull callback: RedditDataSource.LoadNewsCallback) {\n        val bufferedReader = mContext.resources.openRawResource(R.raw.reddit_overview).bufferedReader()\n        val gson = Gson()\n        val json = gson.fromJson(bufferedReader, RedditNewsAPIResponse::class.java)\n        for (child in json.data!!.children!!) {\n            val data = child.data!!\n            data.let {\n                redditNewsDataList.add(RedditNewsData(data.author!!, data.title!!, data.num_comments, data.created, data.thumbnail!!, data.url!!, data.id!!, data.permalink!!))\n            }\n        }\n        callback.onNewsLoaded(redditNewsDataList)\n    }\n\n    override fun refreshNews() {\n        // Not required because the {@link ch.zuehlke.reddit.RedditRepository} handles the logic of refreshing the\n        // news from all the available data sources.\n    }\n\n    override fun deleteAllNews() {\n        // Not supported by Reddit :)\n    }\n\n\n    override fun saveRedditNews(@NonNull data: RedditNewsData) {\n        // In this demo app we do not support posting of news, therefore not implemented.\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/mock/java/ch/zuehlke/reddit/data/FakeRedditNewsRemoteDataSource.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/mock/java/ch/zuehlke/reddit/data/FakeRedditNewsRemoteDataSource.kt	(revision )
@@ -1,13 +1,13 @@
-package ch.zuehlke.sbb.reddit.data
+package ch.zuehlke.reddit.data
 
 import android.content.Context
 import android.support.annotation.NonNull
-import ch.zuehlke.sbb.reddit.R
-import ch.zuehlke.sbb.reddit.data.source.RedditDataSource
-import ch.zuehlke.sbb.reddit.data.source.RemoteDataMapper
-import ch.zuehlke.sbb.reddit.data.source.remote.model.news.RedditNewsAPIResponse
-import ch.zuehlke.sbb.reddit.models.RedditNewsData
-import ch.zuehlke.sbb.reddit.models.RedditPostsData
+import ch.zuehlke.reddit.R
+import ch.zuehlke.reddit.data.source.RedditDataSource
+import ch.zuehlke.reddit.data.source.RemoteDataMapper
+import ch.zuehlke.reddit.data.source.remote.model.news.RedditNewsAPIResponse
+import ch.zuehlke.reddit.models.RedditNewsData
+import ch.zuehlke.reddit.models.RedditPostsData
 import com.google.gson.Gson
 import javax.inject.Inject
 import kotlin.collections.ArrayList
Index: app/src/main/java/ch/zuehlke/reddit/data/source/remote/model/news/RedditNewsAPIResponseData.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.data.source.remote.model.news\n\nimport com.google.gson.annotations.Expose\n\n/**\n * Created by chsc on 12.11.17.\n */\n\nclass RedditNewsAPIResponseData {\n\n    @Expose\n    var children: List<RedditNewsAPIChildrenResponse>? = null\n    @Expose\n    var after: String? = null\n    @Expose\n    var before: String? = null\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/data/source/remote/model/news/RedditNewsAPIResponseData.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/data/source/remote/model/news/RedditNewsAPIResponseData.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.data.source.remote.model.news
+package ch.zuehlke.reddit.data.source.remote.model.news
 
 import com.google.gson.annotations.Expose
 
Index: app/src/main/java/ch/zuehlke/reddit/di/FragmentBuilderModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.di\n\nimport ch.zuehlke.sbb.reddit.di.scope.FragmentScope\nimport ch.zuehlke.sbb.reddit.features.login.LoginFragment\nimport ch.zuehlke.sbb.reddit.features.news.detail.DetailFragment\nimport ch.zuehlke.sbb.reddit.features.news.overview.OverviewFragment\nimport dagger.Module\nimport dagger.android.ContributesAndroidInjector\n\n/**\n * Created by celineheldner on 07.03.18.\n */\n@Module\npublic abstract class FragmentBuilderModule{\n\n    @ContributesAndroidInjector\n    @FragmentScope\n    abstract fun contributeLoginFragment(): LoginFragment\n\n    @ContributesAndroidInjector\n    @FragmentScope\n    abstract fun contributeDetailFragment(): DetailFragment\n\n    @ContributesAndroidInjector\n    @FragmentScope\n    abstract fun contributeOverviewFragment(): OverviewFragment\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/di/FragmentBuilderModule.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/di/FragmentBuilderModule.kt	(revision )
@@ -1,9 +1,9 @@
-package ch.zuehlke.sbb.reddit.di
+package ch.zuehlke.reddit.di
 
-import ch.zuehlke.sbb.reddit.di.scope.FragmentScope
-import ch.zuehlke.sbb.reddit.features.login.LoginFragment
-import ch.zuehlke.sbb.reddit.features.news.detail.DetailFragment
-import ch.zuehlke.sbb.reddit.features.news.overview.OverviewFragment
+import ch.zuehlke.reddit.di.scope.FragmentScope
+import ch.zuehlke.reddit.features.login.LoginFragment
+import ch.zuehlke.reddit.features.news.detail.DetailFragment
+import ch.zuehlke.reddit.features.news.overview.OverviewFragment
 import dagger.Module
 import dagger.android.ContributesAndroidInjector
 
Index: app/src/main/java/ch/zuehlke/reddit/models/RedditNewsData.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.models\n\nimport ch.zuehlke.sbb.reddit.features.news.overview.adapter.AdapterConstants\nimport ch.zuehlke.sbb.reddit.features.news.overview.adapter.ViewType\n\n/**\n * Created by chsc on 08.11.17.\n */\n//TODO: convert to data class\nclass RedditNewsData : ViewType {\n\n    var author: String? = null\n    var title: String? = null\n    var numberOfComments: Int = 0\n    var created: Long = 0\n    var thumbnailUrl: String? = null\n    var url: String? = null\n    var id: String? = null\n    var permaLink: String? = null\n\n    constructor(author: String, title: String, numberOfComments: Int, created: Long, thumbnailUrl: String, url: String, id: String, permaLink: String) {\n        this.author = author\n        this.title = title\n        this.numberOfComments = numberOfComments\n        this.created = created\n        this.thumbnailUrl = thumbnailUrl\n        this.url = url\n        this.id = id\n        this.permaLink = permaLink\n    }\n\n    constructor() {}\n\n    override val viewType: Int\n        get() = AdapterConstants.NEWS\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/models/RedditNewsData.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/models/RedditNewsData.kt	(revision )
@@ -1,7 +1,7 @@
-package ch.zuehlke.sbb.reddit.models
+package ch.zuehlke.reddit.models
 
-import ch.zuehlke.sbb.reddit.features.news.overview.adapter.AdapterConstants
-import ch.zuehlke.sbb.reddit.features.news.overview.adapter.ViewType
+import ch.zuehlke.reddit.features.news.overview.adapter.AdapterConstants
+import ch.zuehlke.reddit.features.news.overview.adapter.ViewType
 
 /**
  * Created by chsc on 08.11.17.
Index: app/src/main/java/ch/zuehlke/reddit/features/news/overview/adapter/ViewTypeDelegateAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.features.news.overview.adapter\n\nimport android.support.v7.widget.RecyclerView\nimport android.view.ViewGroup\n\n/**\n * Created by chsc on 12.11.17.\n */\n\ninterface ViewTypeDelegateAdapter {\n\n    fun onCreateViewHolder(parent: ViewGroup): RecyclerView.ViewHolder\n\n    fun onBindViewHolder(holder: RecyclerView.ViewHolder, item: ViewType)\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/features/news/overview/adapter/ViewTypeDelegateAdapter.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/features/news/overview/adapter/ViewTypeDelegateAdapter.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.features.news.overview.adapter
+package ch.zuehlke.reddit.features.news.overview.adapter
 
 import android.support.v7.widget.RecyclerView
 import android.view.ViewGroup
Index: app/src/main/java/ch/zuehlke/reddit/di/scope/ActivityScope.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.di.scope\n\nimport javax.inject.Scope\n\n/**\n * Created by celineheldner on 07.03.18.\n */\n@MustBeDocumented\n@Scope\n@Retention(AnnotationRetention.RUNTIME)\nannotation class ActivityScope
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/di/scope/ActivityScope.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/di/scope/ActivityScope.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.di.scope
+package ch.zuehlke.reddit.di.scope
 
 import javax.inject.Scope
 
Index: app/src/main/java/ch/zuehlke/reddit/data/source/local/RedditNewsPersistenceContract.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.data.source.local\n\nimport android.provider.BaseColumns\n\n/**\n * Created by chsc on 08.11.17.\n */\n\nobject RedditNewsPersistenceContract {\n\n    abstract class RedditNewsEntry : BaseColumns {\n        companion object {\n            val TABLE_NAME = \"redditnews\"\n            val COLUMN_NAME_AUTHOR = \"author\"\n            val COLUMN_NAME_TITLE = \"title\"\n            val COLUMN_NAME_COMMENTS = \"comments\"\n            val COLUMN_NAME_CREATED = \"createdAt\"\n            val COLUMN_NAME_THUMBNAIL = \"thumbnail\"\n            val COLUMN_NAME_URL = \"url\"\n            val COLUMN_NAME_ID = \"entryId\"\n            val COLUMN_NAME_PERMA_LINK = \"permaLink\"\n        }\n\n    }\n\n    object RedditPostEntry {\n        val TABLE_NAME = \"redditposts\"\n        val COLUMN_NAME_ID = \"postId\"\n        val COLUMN_NAME_AUTHOR = \"author\"\n        val COLUMN_NAME_PARENT_ID = \"parentId\"\n        val COLUMN_NAME_BODY = \"body\"\n        val COLUMN_NAME_CREATED = \"createdAt\"\n        val COLUMN_NAME_DEPTH = \"depth\"\n        val COLUMN_NAME_BODY_HTML = \"bodyHTML\"\n        val COLUMN_NAME_PARENTPERMALINK = \"parentPermaLink\"\n        val COLUMN_NAME_ORDERING = \"ordering\"\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/data/source/local/RedditNewsPersistenceContract.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/data/source/local/RedditNewsPersistenceContract.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.data.source.local
+package ch.zuehlke.reddit.data.source.local
 
 import android.provider.BaseColumns
 
Index: app/src/main/java/ch/zuehlke/reddit/models/RedditPostsData.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.models\n\n/**\n * Created by celineheldner on 13.11.17.\n */\n\n//TODO: convert to data class\nclass RedditPostsData(var id: String, var parentId: String?, author: String?, body: String?, created_utc: Long, depth: Int, body_html: String?, parentPermaLink: String?, ordering: Long) {\n    var author: String? = null\n    var body: String? = null\n    var createdUtc: Long = 0\n    var depth = 0\n    var ordering = -1L\n    var body_html: String? = null\n    var parentPermaLink: String? = null\n\n    init {\n        this.author = author\n        this.body = body\n        this.createdUtc = created_utc\n        this.depth = depth\n        this.body_html = body_html\n        this.parentPermaLink = parentPermaLink\n        this.ordering = ordering\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/models/RedditPostsData.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/models/RedditPostsData.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.models
+package ch.zuehlke.reddit.models
 
 /**
  * Created by celineheldner on 13.11.17.
Index: app/src/main/java/ch/zuehlke/reddit/data/source/remote/model/posts/RedditPostElement.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.data.source.remote.model.posts\n\nimport com.google.gson.annotations.Expose\n\n/**\n * Created by chsc on 13.11.17.\n */\n\n\nabstract class RedditPostElement private constructor() {\n\n\n    class DataRedditPostElement : RedditPostElement() {\n\n        @Expose\n        val kind: String? = null\n        @Expose\n        val data: RedditPost? = null\n\n    }\n\n    // This is a special wrapper because we cannot make java.util.String to be a subclass of the RedditPostElement class\n    // Additionally, you can add more methods if necessary\n    class ReferenceRedditPostElement constructor(@Expose\n                                                         val reference: String) : RedditPostElement()\n\n    companion object {\n\n\n        fun reference(reference: String): RedditPostElement {\n            return ReferenceRedditPostElement(reference)\n        }\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/data/source/remote/model/posts/RedditPostElement.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/data/source/remote/model/posts/RedditPostElement.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.data.source.remote.model.posts
+package ch.zuehlke.reddit.data.source.remote.model.posts
 
 import com.google.gson.annotations.Expose
 
Index: app/src/main/java/ch/zuehlke/reddit/features/news/overview/ScrollChildSwipeRefreshLayout.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.features.news.overview\n\nimport android.content.Context\nimport android.support.v4.view.ViewCompat\nimport android.support.v4.widget.SwipeRefreshLayout\nimport android.util.AttributeSet\nimport android.view.View\n\n/**\n * Extends [SwipeRefreshLayout] to support non-direct descendant scrolling views.\n *\n *\n * [SwipeRefreshLayout] works as expected when a scroll view is a direct child: it triggers\n * the refresh only when the view is on top. This class adds a way (@link #setScrollUpChild} to\n * define which view controls this behavior.\n */\nclass ScrollChildSwipeRefreshLayout : SwipeRefreshLayout {\n\n    private var mScrollUpChild: View? = null\n\n    constructor(context: Context) : super(context) {}\n\n    constructor(context: Context, attrs: AttributeSet) : super(context, attrs) {}\n\n    override fun canChildScrollUp(): Boolean {\n        if (mScrollUpChild != null) {\n            return ViewCompat.canScrollVertically(mScrollUpChild!!, -1)\n        }\n        return super.canChildScrollUp()\n    }\n\n    fun setScrollUpChild(view: View) {\n        mScrollUpChild = view\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/features/news/overview/ScrollChildSwipeRefreshLayout.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/features/news/overview/ScrollChildSwipeRefreshLayout.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.features.news.overview
+package ch.zuehlke.reddit.features.news.overview
 
 import android.content.Context
 import android.support.v4.view.ViewCompat
Index: app/src/main/java/ch/zuehlke/reddit/util/DateUtils.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.util\n\nimport java.util.Calendar\nimport java.util.Date\n\n/**\n * Created by chsc on 11.11.17.\n */\n\nobject DateUtils {\n\n\n    fun friendlyTime(created: Long): String {\n        val sec = Math.floor((Date().time / 1000 - created).toDouble())\n        var interval = Math.floor(sec / 31536000)\n\n\n        if (interval >= 1) {\n            if (interval == 1.0)\n                return interval.toString() + \" year ago\"\n            else\n                return interval.toString() + \" years ago\"\n        }\n        interval = Math.floor(sec / 2592000)\n        if (interval >= 1) {\n            if (interval == 1.0)\n                return interval.toString() + \" month ago\"\n            else\n                return interval.toString() + \" months ago\"\n        }\n        interval = Math.floor(sec / 86400)\n        if (interval >= 1) {\n            if (interval == 1.0)\n                return interval.toString() + \" day ago\"\n            else\n                return interval.toString() + \" days ago\"\n        }\n        interval = Math.floor(sec / 3600)\n        if (interval >= 1) {\n            if (interval == 1.0)\n                return interval.toString() + \" hour ago\"\n            else\n                return interval.toString() + \" hours ago\"\n        }\n        interval = Math.floor(sec / 60)\n        if (interval >= 1) {\n            if (interval == 1.0)\n                return interval.toString() + \" minute ago\"\n            else\n                return interval.toString() + \" minutes ago\"\n        }\n        return Math.floor(sec).toString() + \" seconds ago\"\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/util/DateUtils.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/util/DateUtils.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.util
+package ch.zuehlke.reddit.util
 
 import java.util.Calendar
 import java.util.Date
Index: app/src/main/java/ch/zuehlke/reddit/di/ActivityLifeCycleCallback.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.di\n\nimport android.app.Activity\nimport android.app.Application\nimport android.os.Bundle\n\n/**\n * Created by celineheldner on 12.09.17.\n */\n\n\nopen class ActivityLifeCycleCallback : Application.ActivityLifecycleCallbacks {\n     override fun onActivityPaused(p0: Activity) {\n    }\n\n    override fun onActivityResumed(p0: Activity) {\n    }\n\n    override fun onActivityStarted(p0: Activity) {\n    }\n\n    override fun onActivityDestroyed(p0: Activity) {\n    }\n\n    override fun onActivitySaveInstanceState(activity: Activity, p1: Bundle?) {\n    }\n\n    override fun onActivityStopped(p0: Activity) {\n    }\n\n    override fun onActivityCreated(activity: Activity, p1: Bundle?) {\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/di/ActivityLifeCycleCallback.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/di/ActivityLifeCycleCallback.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.di
+package ch.zuehlke.reddit.di
 
 import android.app.Activity
 import android.app.Application
Index: app/src/main/java/ch/zuehlke/reddit/data/source/local/RedditNewsDataHelper.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.data.source.local\n\nimport android.content.Context\nimport android.database.sqlite.SQLiteDatabase\nimport android.database.sqlite.SQLiteOpenHelper\n\n/**\n * Created by chsc on 08.11.17.\n */\n\nclass RedditNewsDataHelper(context: Context) : SQLiteOpenHelper(context, RedditNewsDataHelper.DATABASE_NAME, null, RedditNewsDataHelper.DATABASE_VERSION) {\n\n    override fun onCreate(sqLiteDatabase: SQLiteDatabase) {\n        sqLiteDatabase.execSQL(SQL_CREATE_ENTRIES)\n        sqLiteDatabase.execSQL(SQL_CREATE_POST_ENTRIES)\n    }\n\n    override fun onUpgrade(sqLiteDatabase: SQLiteDatabase, i: Int, i1: Int) {\n        // Not needed for version 1\n    }\n\n    companion object {\n\n        val DATABASE_VERSION = 1\n\n        val DATABASE_NAME = \"RedditNews.db\"\n\n        private val TEXT_TYPE = \" TEXT\"\n\n        private val LONG_TYPE = \" INTEGER \"\n\n        private val COMMA_SEP = \",\"\n\n\n        private val SQL_CREATE_ENTRIES = \"CREATE TABLE \" + RedditNewsPersistenceContract.RedditNewsEntry.TABLE_NAME + \" (\" +\n                RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_ID + TEXT_TYPE + \" PRIMARY_KEY\" + COMMA_SEP +\n                RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_AUTHOR + TEXT_TYPE + COMMA_SEP +\n                RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_COMMENTS + LONG_TYPE + COMMA_SEP +\n                RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_CREATED + LONG_TYPE + COMMA_SEP +\n                RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_PERMA_LINK + TEXT_TYPE + COMMA_SEP +\n                RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_THUMBNAIL + TEXT_TYPE + COMMA_SEP +\n                RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_TITLE + TEXT_TYPE + COMMA_SEP +\n                RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_URL + TEXT_TYPE +\n                \" )\"\n        private val SQL_CREATE_POST_ENTRIES = \"CREATE TABLE \" + RedditNewsPersistenceContract.RedditPostEntry.TABLE_NAME + \" (\" +\n                RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_ID + TEXT_TYPE + \" PRIMARY_KEY\" + COMMA_SEP +\n                RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_AUTHOR + TEXT_TYPE + COMMA_SEP +\n                RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_PARENT_ID + TEXT_TYPE + COMMA_SEP +\n                RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_CREATED + LONG_TYPE + COMMA_SEP +\n                RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_BODY + TEXT_TYPE + COMMA_SEP +\n                RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_DEPTH + LONG_TYPE + COMMA_SEP +\n                RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_BODY_HTML + TEXT_TYPE + COMMA_SEP +\n                RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_PARENTPERMALINK + TEXT_TYPE + COMMA_SEP +\n                RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_ORDERING + LONG_TYPE +\n                \" )\"\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/data/source/local/RedditNewsDataHelper.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/data/source/local/RedditNewsDataHelper.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.data.source.local
+package ch.zuehlke.reddit.data.source.local
 
 import android.content.Context
 import android.database.sqlite.SQLiteDatabase
Index: app/src/main/java/ch/zuehlke/reddit/data/source/local/RedditNewsLocalDataSource.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.data.source.local\n\nimport android.content.ContentValues\nimport android.content.Context\n\nimport java.util.ArrayList\n\nimport ch.zuehlke.sbb.reddit.data.source.RedditDataSource\nimport ch.zuehlke.sbb.reddit.models.RedditNewsData\nimport ch.zuehlke.sbb.reddit.models.RedditPostsData\n\nimport com.google.common.base.Preconditions.checkNotNull\nimport javax.inject.Inject\n\n/**\n * Created by chsc on 08.11.17.\n */\n\nclass RedditNewsLocalDataSource// Prevent direct instantiation.\n@Inject constructor(context: Context) : RedditDataSource {\n\n    private val mDbHelper: RedditNewsDataHelper\n\n    init {\n        checkNotNull(context)\n        mDbHelper = RedditNewsDataHelper(context)\n    }\n\n    override fun getMoreNews(callback: RedditDataSource.LoadNewsCallback) {\n        throw UnsupportedOperationException(\"Not supported by local datasource\")\n    }\n\n    override fun getNews(callback: RedditDataSource.LoadNewsCallback) {\n        val redditNews = ArrayList<RedditNewsData>()\n        val db = mDbHelper.readableDatabase\n\n        val projection = arrayOf(RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_URL, RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_TITLE, RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_THUMBNAIL, RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_PERMA_LINK, RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_CREATED, RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_COMMENTS, RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_AUTHOR, RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_ID)\n\n        val c = db.query(\n                RedditNewsPersistenceContract.RedditNewsEntry.TABLE_NAME, projection, null, null, null, null, null)\n\n        if (c != null && c.count > 0) {\n            while (c.moveToNext()) {\n                val newsId = c.getString(c.getColumnIndexOrThrow(RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_ID))\n                val title = c.getString(c.getColumnIndexOrThrow(RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_TITLE))\n                val author = c.getString(c.getColumnIndexOrThrow(RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_AUTHOR))\n                val created = c.getLong(c.getColumnIndexOrThrow(RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_CREATED))\n                val comments = c.getInt(c.getColumnIndexOrThrow(RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_COMMENTS))\n                val thumbnail = c.getString(c.getColumnIndexOrThrow(RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_THUMBNAIL))\n                val permaLink = c.getString(c.getColumnIndexOrThrow(RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_PERMA_LINK))\n                val url = c.getString(c.getColumnIndexOrThrow(RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_URL))\n\n                val data = RedditNewsData(author, title, comments, created, thumbnail, url, newsId, permaLink)\n                redditNews.add(data)\n            }\n        }\n        c?.close()\n\n        db.close()\n\n        if (redditNews.isEmpty()) {\n            // This will be called if the table is new or just empty.\n            callback.onDataNotAvailable()\n        } else {\n            callback.onNewsLoaded(redditNews)\n        }\n    }\n\n    override fun getPosts(callback: RedditDataSource.LoadPostsCallback, permalink: String) {\n        val redditNews = ArrayList<RedditPostsData>()\n        val db = mDbHelper.readableDatabase\n\n        val projection = arrayOf(RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_PARENT_ID, RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_ID, RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_DEPTH, RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_CREATED, RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_BODY_HTML, RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_BODY, RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_PARENTPERMALINK, RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_ORDERING, RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_AUTHOR)\n\n        val selection = RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_PARENTPERMALINK + \" like '\" + permalink + \"'\"\n\n        val c = db.query(\n                RedditNewsPersistenceContract.RedditPostEntry.TABLE_NAME, projection, selection, null, null, null, RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_ORDERING)\n\n        if (c != null && c.count > 0) {\n            while (c.moveToNext()) {\n                val parentId = c.getString(c.getColumnIndexOrThrow(RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_PARENT_ID))\n                val postId = c.getString(c.getColumnIndexOrThrow(RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_ID))\n                val depth = c.getInt(c.getColumnIndexOrThrow(RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_DEPTH))\n                val created = c.getLong(c.getColumnIndexOrThrow(RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_CREATED))\n                val bodyHtml = c.getString(c.getColumnIndexOrThrow(RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_BODY_HTML))\n                val body = c.getString(c.getColumnIndexOrThrow(RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_BODY))\n                val permaLink = c.getString(c.getColumnIndexOrThrow(RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_PARENTPERMALINK))\n                val ordering = c.getLong(c.getColumnIndexOrThrow(RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_ORDERING))\n                val author = c.getString(c.getColumnIndexOrThrow(RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_AUTHOR))\n\n                val data = RedditPostsData(postId, parentId, author, body, created, depth, bodyHtml, permaLink, ordering)\n                redditNews.add(data)\n            }\n        }\n        c?.close()\n\n        db.close()\n\n        if (redditNews.isEmpty()) {\n            // This will be called if the table is new or just empty.\n            callback.onDataNotAvailable()\n        } else {\n            callback.onPostsLoaded(redditNews)\n        }\n    }\n\n    override fun savePosts(data: RedditPostsData) {\n\n        checkNotNull(data)\n        val db = mDbHelper.writableDatabase\n\n        val values = ContentValues()\n        values.put(RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_AUTHOR, data.author)\n        values.put(RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_BODY, data.body)\n        values.put(RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_CREATED, data.createdUtc)\n        values.put(RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_ID, data.id)\n        values.put(RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_PARENTPERMALINK, data.parentPermaLink)\n        values.put(RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_DEPTH, data.depth)\n        values.put(RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_PARENT_ID, data.parentId)\n        values.put(RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_BODY_HTML, data.body_html)\n        values.put(RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_ORDERING, data.ordering)\n\n\n        db.insert(RedditNewsPersistenceContract.RedditPostEntry.TABLE_NAME, null, values)\n\n        db.close()\n\n    }\n\n    override fun deletePostsWithPermaLink(permaLink: String) {\n\n        val where = RedditNewsPersistenceContract.RedditPostEntry.COLUMN_NAME_PARENTPERMALINK + \" like '\" + permaLink + \"'\"\n\n        val db = mDbHelper.writableDatabase\n        db.delete(RedditNewsPersistenceContract.RedditPostEntry.TABLE_NAME, where, null)\n        db.close()\n    }\n\n    override fun refreshNews() {\n        // Not required because the {@link RedditRepository} handles the logic of refreshing the\n        // news from all the available redditPost sources.\n    }\n\n    override fun deleteAllNews() {\n        val db = mDbHelper.writableDatabase\n        db.delete(RedditNewsPersistenceContract.RedditNewsEntry.TABLE_NAME, null, null)\n        db.close()\n    }\n\n    override fun saveRedditNews(data: RedditNewsData) {\n        checkNotNull(data)\n        val db = mDbHelper.writableDatabase\n\n        val values = ContentValues()\n        values.put(RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_AUTHOR, data.author)\n        values.put(RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_COMMENTS, data.numberOfComments)\n        values.put(RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_CREATED, data.created)\n        values.put(RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_ID, data.id)\n        values.put(RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_PERMA_LINK, data.permaLink)\n        values.put(RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_THUMBNAIL, data.thumbnailUrl)\n        values.put(RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_TITLE, data.title)\n        values.put(RedditNewsPersistenceContract.RedditNewsEntry.COLUMN_NAME_URL, data.url)\n\n\n        db.insert(RedditNewsPersistenceContract.RedditNewsEntry.TABLE_NAME, null, values)\n\n        db.close()\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/data/source/local/RedditNewsLocalDataSource.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/data/source/local/RedditNewsLocalDataSource.kt	(revision )
@@ -1,13 +1,13 @@
-package ch.zuehlke.sbb.reddit.data.source.local
+package ch.zuehlke.reddit.data.source.local
 
 import android.content.ContentValues
 import android.content.Context
 
 import java.util.ArrayList
 
-import ch.zuehlke.sbb.reddit.data.source.RedditDataSource
-import ch.zuehlke.sbb.reddit.models.RedditNewsData
-import ch.zuehlke.sbb.reddit.models.RedditPostsData
+import ch.zuehlke.reddit.data.source.RedditDataSource
+import ch.zuehlke.reddit.models.RedditNewsData
+import ch.zuehlke.reddit.models.RedditPostsData
 
 import com.google.common.base.Preconditions.checkNotNull
 import javax.inject.Inject
Index: app/src/main/java/ch/zuehlke/reddit/di/ViewModelFactory.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.di\n\nimport android.arch.lifecycle.ViewModel\nimport android.arch.lifecycle.ViewModelProvider\nimport javax.inject.Inject\nimport javax.inject.Provider\nimport javax.inject.Singleton\n\n/**\n * Created by celineheldner on 06.03.18.\n */\n@Singleton\nclass ViewModelFactory @Inject constructor(private val creators: Map<Class<out ViewModel>,@JvmSuppressWildcards Provider<ViewModel>>): ViewModelProvider.Factory{\n\n    @SuppressWarnings(\"unchecked\")\n    override fun <T : ViewModel?> create(modelClass: Class<T>): T {\n        var creator: Provider<ViewModel>? = creators[modelClass]\n        if (creator == null) {\n            for ((key, value) in creators) {\n                if (modelClass.isAssignableFrom(key)) {\n                    creator = value\n                    break\n                }\n            }\n        }\n        if (creator == null) throw IllegalArgumentException(\"unknown model class \" + modelClass)\n        try {\n            return creator.get() as T\n        } catch (e: Exception) {\n            throw RuntimeException(e)\n        }\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/di/ViewModelFactory.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/di/ViewModelFactory.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.di
+package ch.zuehlke.reddit.di
 
 import android.arch.lifecycle.ViewModel
 import android.arch.lifecycle.ViewModelProvider
Index: app/src/main/java/ch/zuehlke/reddit/features/news/NavigationController.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.features.news\n\nimport android.support.v4.app.Fragment\nimport android.support.v4.app.FragmentActivity\nimport ch.zuehlke.sbb.reddit.features.news.overview.OverviewFragment\nimport ch.zuehlke.sbb.reddit.util.ActivityUtils\n\n/**\n * Created by celineheldner on 17.11.17.\n */\nclass NavigationController constructor(activity: FragmentActivity, fragmentContainerId: Int?){\n    val mActivity = activity\n    val mContainerId = fragmentContainerId\n\n    fun showOverview(){\n        var overviewFragment: OverviewFragment? = mActivity.supportFragmentManager.findFragmentById(mContainerId!!) as OverviewFragment?\n        if (overviewFragment == null) {\n            // Create the fragment\n            overviewFragment = OverviewFragment.newInstance()\n            ActivityUtils.addFragmentToActivity(\n                    mActivity.supportFragmentManager, overviewFragment, mContainerId)\n        }\n\n\n    }\n\n    fun navigateToFragment(fragment: Class<out Fragment>){\n        ActivityUtils.replaceFragmentToActivity(\n                mActivity.supportFragmentManager, fragment.newInstance(), mContainerId!!)\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/features/news/NavigationController.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/features/news/NavigationController.kt	(revision )
@@ -1,9 +1,9 @@
-package ch.zuehlke.sbb.reddit.features.news
+package ch.zuehlke.reddit.features.news
 
 import android.support.v4.app.Fragment
 import android.support.v4.app.FragmentActivity
-import ch.zuehlke.sbb.reddit.features.news.overview.OverviewFragment
-import ch.zuehlke.sbb.reddit.util.ActivityUtils
+import ch.zuehlke.reddit.features.news.overview.OverviewFragment
+import ch.zuehlke.reddit.util.ActivityUtils
 
 /**
  * Created by celineheldner on 17.11.17.
@@ -20,8 +20,6 @@
             ActivityUtils.addFragmentToActivity(
                     mActivity.supportFragmentManager, overviewFragment, mContainerId)
         }
-
-
     }
 
     fun navigateToFragment(fragment: Class<out Fragment>){
Index: app/src/mock/java/ch/zuehlke/reddit/Injection.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.reddit\n\nimport ch.zuehlke.sbb.reddit.data.source.remote.RedditElementTypeAdapterFactory.Companion.elementTypeAdapterFactory\nimport ch.zuehlke.sbb.reddit.data.source.remote.model.posts.RedditPostElement\nimport com.google.gson.GsonBuilder\nimport com.google.gson.reflect.TypeToken\n\n/**\n * Created by chsc on 08.11.17.\n */\n\nobject Injection {\n\n    val gson = GsonBuilder()\n            .registerTypeAdapterFactory(elementTypeAdapterFactory)\n            .create()\n\n\n    val type = object : TypeToken<List<RedditPostElement>>() {\n\n    }.type\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/mock/java/ch/zuehlke/reddit/Injection.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/mock/java/ch/zuehlke/reddit/Injection.kt	(revision )
@@ -1,7 +1,7 @@
 package ch.zuehlke.reddit
 
-import ch.zuehlke.sbb.reddit.data.source.remote.RedditElementTypeAdapterFactory.Companion.elementTypeAdapterFactory
-import ch.zuehlke.sbb.reddit.data.source.remote.model.posts.RedditPostElement
+import ch.zuehlke.reddit.data.source.remote.RedditElementTypeAdapterFactory.Companion.elementTypeAdapterFactory
+import ch.zuehlke.reddit.data.source.remote.model.posts.RedditPostElement
 import com.google.gson.GsonBuilder
 import com.google.gson.reflect.TypeToken
 
Index: app/src/main/java/ch/zuehlke/reddit/data/source/RemoteDataMapper.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.data.source\n\nimport android.util.Log\nimport ch.zuehlke.sbb.reddit.data.source.remote.model.posts.RedditPostElement\nimport ch.zuehlke.sbb.reddit.models.RedditPostsData\nimport com.google.common.base.Strings\nimport com.google.gson.Gson\nimport okhttp3.ResponseBody\nimport java.io.BufferedReader\nimport java.io.IOException\nimport java.lang.reflect.Type\nimport java.util.ArrayList\n\n/**\n * Created by celineheldner on 20.02.18.\n */\nclass RemoteDataMapper\nprivate constructor(gson: Gson, type: Type){\n    private val mGson: Gson\n    private val mType: Type\n    private val TAG = javaClass.canonicalName\n    private var order = 0;\n\n    init {\n        mGson = gson\n        mType = type\n    }\n\n    companion object {\n        private var INSTANCE: RemoteDataMapper? = null\n\n        fun getInstance(gson: Gson, type: Type): RemoteDataMapper {\n            if (INSTANCE == null) {\n                INSTANCE = RemoteDataMapper(gson, type)\n            }\n            return INSTANCE!!\n        }\n    }\n\n    fun flattenRetrofitResponse(response: List<RedditPostElement>, parentPermaLink: String): List<RedditPostsData> {\n        val flatten = ArrayList<RedditPostsData>()\n        for (redditPostElement in response) {\n            if (redditPostElement is RedditPostElement.DataRedditPostElement) {\n                val dataElement = redditPostElement\n                val data = dataElement.data\n                if (dataElement.data != null) {\n                    if (!Strings.isNullOrEmpty(dataElement.data.body_html)) {\n                        data?.let {\n                            val postData = RedditPostsData(data.id!!, null, data.author!!, data.body!!, data.created_utc, data.depth, data.body_html!!, data.permalink!!, order++.toLong())\n                            flatten.add(postData)\n                        }\n\n                    } else {\n                        data?.let {\n                            flatten.addAll(recursivlyParseResponse(dataElement, data.id, parentPermaLink))\n                        }\n\n                    }\n                }\n            }\n        }\n        return flatten\n    }\n\n    private fun recursivlyParseResponse(dataRedditPostElement: RedditPostElement.DataRedditPostElement, parentId: String?, parentPermaLink: String): List<RedditPostsData> {\n        val posts = ArrayList<RedditPostsData>()\n        for (child in dataRedditPostElement.data!!.children!!) {\n            if (child is RedditPostElement.DataRedditPostElement) {\n                val data = child.data\n                if (data != null) {\n                    val postData = RedditPostsData(data.id!!, parentId, data.author, data.body, data.created_utc, data.depth, data.body_html, parentPermaLink, order++.toLong())\n                    posts.add(postData)\n                    if (data.replies != null && data.replies is RedditPostElement.DataRedditPostElement) {\n                        posts.addAll(recursivlyParseResponse(data.replies as RedditPostElement.DataRedditPostElement, data.id!!, parentPermaLink))\n                    }\n                }\n            }\n\n        }\n        return posts\n    }\n\n\n    fun parseResponseToPostElements(response: ResponseBody): List<RedditPostElement> {\n        var redditPostElements: List<RedditPostElement>? = null\n        try {\n            redditPostElements = mGson.fromJson<List<RedditPostElement>>(response.string(), mType)\n        } catch (e: IOException) {\n            Log.e(TAG,\"Error while parsing respone $e\")\n        }\n\n        return redditPostElements!!\n    }\n\n    fun parseResponseToPostElements(response: BufferedReader): List<RedditPostElement> {\n        var redditPostElements: List<RedditPostElement>? = null\n        try {\n            redditPostElements = mGson.fromJson<List<RedditPostElement>>(response, mType)\n        } catch (e: IOException) {\n            Log.e(\"FakeRemote\",\"Error while parsing respone $e\")\n        }\n\n        return redditPostElements!!\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/data/source/RemoteDataMapper.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/data/source/RemoteDataMapper.kt	(revision )
@@ -1,8 +1,8 @@
-package ch.zuehlke.sbb.reddit.data.source
+package ch.zuehlke.reddit.data.source
 
 import android.util.Log
-import ch.zuehlke.sbb.reddit.data.source.remote.model.posts.RedditPostElement
-import ch.zuehlke.sbb.reddit.models.RedditPostsData
+import ch.zuehlke.reddit.data.source.remote.model.posts.RedditPostElement
+import ch.zuehlke.reddit.models.RedditPostsData
 import com.google.common.base.Strings
 import com.google.gson.Gson
 import okhttp3.ResponseBody
Index: app/src/mock/java/ch/zuehlke/reddit/di/AppModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.di\n\nimport android.app.Application\nimport android.content.Context\nimport ch.zuehlke.sbb.reddit.data.FakeRedditNewsRemoteDataSource\nimport ch.zuehlke.sbb.reddit.data.source.RedditRepository\nimport ch.zuehlke.sbb.reddit.data.source.RemoteDataMapper\nimport ch.zuehlke.sbb.reddit.data.source.local.RedditNewsLocalDataSource\nimport ch.zuehlke.sbb.reddit.data.source.remote.RedditAPI\nimport ch.zuehlke.sbb.reddit.data.source.remote.RedditElementTypeAdapterFactory\nimport ch.zuehlke.sbb.reddit.data.source.remote.RedditNewsDataRemoteDataSource\nimport ch.zuehlke.sbb.reddit.data.source.remote.model.posts.RedditPostElement\nimport com.google.common.base.Preconditions\nimport com.google.gson.Gson\nimport com.google.gson.GsonBuilder\nimport com.google.gson.reflect.TypeToken\nimport dagger.Module\nimport dagger.Provides\nimport okhttp3.OkHttpClient\nimport okhttp3.logging.HttpLoggingInterceptor\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\nimport java.lang.reflect.Modifier\nimport java.lang.reflect.Type\nimport javax.inject.Singleton\n\n/**\n * Created by celineheldner on 28.02.18.\n */\n@Module\nclass AppModule(){\n\n    private val REDDIT_END_POINT = \"https://www.reddit.com/r/kotlin/\"\n\n    @Provides\n    fun provideContext(app: Application): Context {\n        return app\n    }\n\n    @Provides\n    @Singleton\n    fun provideGson() = GsonBuilder()\n            .registerTypeAdapterFactory(RedditElementTypeAdapterFactory.elementTypeAdapterFactory)\n            .create()\n\n    @Provides\n    @Singleton\n    fun provideType() = object : TypeToken<List<RedditPostElement>>() {}.type\n\n    @Provides\n    @Singleton\n    fun provideRemoteMapper(gson: Gson, type: Type) = RemoteDataMapper.getInstance(gson, type)\n\n    @Provides\n    @Singleton\n    fun provideRetrofit(): RedditAPI {\n        val gson = GsonBuilder()\n                .excludeFieldsWithModifiers(Modifier.FINAL, Modifier.TRANSIENT, Modifier.STATIC)\n                .excludeFieldsWithoutExposeAnnotation()\n                .registerTypeAdapterFactory(RedditElementTypeAdapterFactory.elementTypeAdapterFactory)\n                .create()\n\n        val interceptor = HttpLoggingInterceptor()\n        interceptor.setLevel(HttpLoggingInterceptor.Level.BODY)\n        val client = OkHttpClient.Builder().addInterceptor(interceptor).build()\n\n\n        return Retrofit.Builder()\n                .baseUrl(REDDIT_END_POINT)\n                .client(client)\n                .addConverterFactory(GsonConverterFactory.create(gson))\n                .build().create<RedditAPI>(RedditAPI::class.java)\n    }\n\n    @Provides\n    @Singleton\n    fun provideRedditRemoteDataSource(context: Context, redditAPI: RedditAPI, dataMapper: RemoteDataMapper) = RedditNewsDataRemoteDataSource(context,redditAPI,dataMapper)\n\n    @Provides\n    @Singleton\n    fun provideRedditLocalDataSource(context: Context) = RedditNewsLocalDataSource(context)\n\n    @Provides\n    @Singleton\n    fun provideFakeRemoteDataSource(context: Context, remoteDataMapper: RemoteDataMapper) = FakeRedditNewsRemoteDataSource(context, remoteDataMapper)\n\n    @Provides\n    @Singleton\n    fun provideRedditNewsRepository(context: Context, fakeRemoteDataSource: FakeRedditNewsRemoteDataSource, redditNewsLocalDataSource: RedditNewsLocalDataSource): RedditRepository {\n        Preconditions.checkNotNull(context)\n        return RedditRepository(fakeRemoteDataSource,\n                redditNewsLocalDataSource, context)\n    }\n    \n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/mock/java/ch/zuehlke/reddit/di/AppModule.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/mock/java/ch/zuehlke/reddit/di/AppModule.kt	(revision )
@@ -1,15 +1,15 @@
-package ch.zuehlke.sbb.reddit.di
+package ch.zuehlke.reddit.di
 
 import android.app.Application
 import android.content.Context
-import ch.zuehlke.sbb.reddit.data.FakeRedditNewsRemoteDataSource
-import ch.zuehlke.sbb.reddit.data.source.RedditRepository
-import ch.zuehlke.sbb.reddit.data.source.RemoteDataMapper
-import ch.zuehlke.sbb.reddit.data.source.local.RedditNewsLocalDataSource
-import ch.zuehlke.sbb.reddit.data.source.remote.RedditAPI
-import ch.zuehlke.sbb.reddit.data.source.remote.RedditElementTypeAdapterFactory
-import ch.zuehlke.sbb.reddit.data.source.remote.RedditNewsDataRemoteDataSource
-import ch.zuehlke.sbb.reddit.data.source.remote.model.posts.RedditPostElement
+import ch.zuehlke.reddit.data.FakeRedditNewsRemoteDataSource
+import ch.zuehlke.reddit.data.source.RedditRepository
+import ch.zuehlke.reddit.data.source.RemoteDataMapper
+import ch.zuehlke.reddit.data.source.local.RedditNewsLocalDataSource
+import ch.zuehlke.reddit.data.source.remote.RedditAPI
+import ch.zuehlke.reddit.data.source.remote.RedditElementTypeAdapterFactory
+import ch.zuehlke.reddit.data.source.remote.RedditNewsDataRemoteDataSource
+import ch.zuehlke.reddit.data.source.remote.model.posts.RedditPostElement
 import com.google.common.base.Preconditions
 import com.google.gson.Gson
 import com.google.gson.GsonBuilder
Index: app/src/main/java/ch/zuehlke/reddit/di/AppInjector.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.di\n\nimport android.app.Activity\nimport android.content.Context\nimport android.os.Bundle\nimport android.support.v4.app.Fragment\nimport android.support.v4.app.FragmentActivity\nimport android.support.v4.app.FragmentManager\nimport ch.zuehlke.reddit.RedditApp\nimport dagger.android.AndroidInjection\nimport dagger.android.support.AndroidSupportInjection\nimport dagger.android.support.HasSupportFragmentInjector\n\n/**\n * Created by celineheldner on 12.01.18.\n */\n\n\nclass AppInjector{\n\n    companion object {\n        fun init(app: RedditApp) {\n\n            DaggerAppComponent.builder().application(app).build().inject(app)\n\n\n            app.registerActivityLifecycleCallbacks(object: ActivityLifeCycleCallback(){\n                 override fun onActivityCreated(activity: Activity, p1: Bundle?) {\n                    handleActivity(activity)\n                }\n            })\n        }\n\n        private fun handleActivity(activity: Activity) {\n            if (activity is HasSupportFragmentInjector) {\n                AndroidInjection.inject(activity)\n            }\n            if (activity is FragmentActivity) {\n                activity.supportFragmentManager.registerFragmentLifecycleCallbacks(object : FragmentManager.FragmentLifecycleCallbacks() {\n\n                    override fun onFragmentAttached(fm: FragmentManager?, f: Fragment?, context: Context?) {\n                        if(f is Injectable){\n                            AndroidSupportInjection.inject(f)\n                        }\n                        super.onFragmentAttached(fm, f, context)\n                    }\n                }, true)\n            }\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/di/AppInjector.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/di/AppInjector.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.di
+package ch.zuehlke.reddit.di
 
 import android.app.Activity
 import android.content.Context
Index: app/src/main/java/ch/zuehlke/reddit/features/news/overview/OverviewFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.features.news.overview\n\nimport android.arch.lifecycle.Observer\nimport android.arch.lifecycle.ViewModelProvider\nimport android.arch.lifecycle.ViewModelProviders\nimport android.os.Bundle\nimport android.support.design.widget.Snackbar\nimport android.support.v4.app.Fragment\nimport android.support.v4.content.ContextCompat\nimport android.support.v7.widget.LinearLayoutManager\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport ch.zuehlke.sbb.reddit.R\nimport ch.zuehlke.sbb.reddit.di.Injectable\nimport ch.zuehlke.sbb.reddit.features.news.NavigationController\nimport ch.zuehlke.sbb.reddit.features.news.NewsViewModel\nimport ch.zuehlke.sbb.reddit.features.news.detail.DetailFragment\nimport ch.zuehlke.sbb.reddit.features.news.overview.adapter.impl.RedditNewsDelegateAdapter.OnNewsSelectedListener\nimport ch.zuehlke.sbb.reddit.features.news.overview.adapter.impl.RedditOverviewAdapter\nimport ch.zuehlke.sbb.reddit.models.RedditNewsData\nimport kotlinx.android.synthetic.main.fragment_overview.*\nimport javax.inject.Inject\n\n/**\n * Created by chsc on 11.11.17.\n */\n\nclass OverviewFragment : Fragment(), Injectable {\n\n    //Injections\n    @Inject\n    lateinit var viewModelFactory: ViewModelProvider.Factory\n\n    private var mOverviewAdapter: RedditOverviewAdapter? = null\n    private var mNavigationController: NavigationController? = null\n\n\n\n\n    private val listener = object: OnNewsSelectedListener {\n        override fun onNewsSelected(url: String) {\n            val newsViewModel = ViewModelProviders.of(activity, viewModelFactory).get(NewsViewModel::class.java);\n                   /* NewsViewModelFactory(redditRepository = Injection.provideRedditNewsRepository(activity))\n             = ViewModelProviders.of(activity, newsFactory).get(NewsViewModel::class.java)*/\n\n            newsViewModel.setRedditUrl(url)\n            mNavigationController?.navigateToFragment(DetailFragment::class.java)\n\n        }\n    }\n\n\n\n    override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        val root = inflater!!.inflate(R.layout.fragment_overview, container, false)\n\n        container?.let {\n            mNavigationController = NavigationController(this.activity,it.id)\n        }\n\n        return root\n    }\n\n\n\n    override fun onActivityCreated(savedInstanceState: Bundle?) {\n        super.onActivityCreated(savedInstanceState)\n        //val newsFactory: NewsViewModelFactory = NewsViewModelFactory(redditRepository = Injection.provideRedditNewsRepository(activity))\n        val newsViewModel = ViewModelProviders.of(activity, viewModelFactory).get(NewsViewModel::class.java);\n\n        newsViewModel.viewState.observe(this, Observer { viewState: NewsViewModel.ViewState? -> handleViewState(viewState)  })\n        newsViewModel.redditNewsData.observe( this, Observer { newsData: List<RedditNewsData>? -> newsData?.let {  mOverviewAdapter?.clearAndAddNews(it) }})\n\n        newsViewModel.moreRedditNewsData.observe(this, Observer {\n            redditNews: List<RedditNewsData>? -> redditNews?.let {  mOverviewAdapter?.addRedditNews(it)}\n        })\n\n        mOverviewAdapter = RedditOverviewAdapter(listener)\n\n        redditNewsView.apply{\n            layoutManager = LinearLayoutManager(context)\n            adapter = mOverviewAdapter\n            setHasFixedSize(true)\n            clearOnScrollListeners()\n        }\n\n        val infiniteScrollListener = object : InfiniteScrollListener(redditNewsView.layoutManager as LinearLayoutManager) {\n            override fun loadingFunction() {\n                newsViewModel.loadMoreRedditNews()\n            }\n        }\n\n        // Set up progress indicator\n        refreshLayout.apply {\n            setColorSchemeColors(\n                    ContextCompat.getColor(activity, R.color.colorPrimary),\n                    ContextCompat.getColor(activity, R.color.colorAccent),\n                    ContextCompat.getColor(activity, R.color.colorPrimaryDark))\n            setScrollUpChild(redditNewsView)\n            setOnRefreshListener {\n                infiniteScrollListener.reset()\n                newsViewModel.loadRedditNews(true, true)\n            }\n        }\n\n        redditNewsView.addOnScrollListener(infiniteScrollListener)\n\n    }\n\n    private fun handleViewState(viewState: NewsViewModel.ViewState?){\n        when(viewState){\n            NewsViewModel.ViewState.LOADING -> refreshLayout.isRefreshing = true\n            NewsViewModel.ViewState.NONE -> {\n                refreshLayout.isRefreshing = false\n                redditNewsView.visibility = View.VISIBLE\n                noRedditNewsView.visibility = View.GONE\n            }\n            NewsViewModel.ViewState.ERROR -> {\n                refreshLayout.isRefreshing = false\n                Snackbar.make(view!!, R.string.overview_screen_error_loading_reddit_news, Snackbar.LENGTH_LONG)\n            }\n            NewsViewModel.ViewState.NO_DATA_AVAILABLE -> {\n                refreshLayout.isRefreshing = false\n                redditNewsView.visibility = View.GONE\n                noRedditNewsView.visibility = View.VISIBLE\n            }\n        }\n    }\n\n\n    companion object {\n\n        fun newInstance(): OverviewFragment {\n            return OverviewFragment()\n        }\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/features/news/overview/OverviewFragment.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/features/news/overview/OverviewFragment.kt	(revision )
@@ -1,4 +1,4 @@
-package ch.zuehlke.sbb.reddit.features.news.overview
+package ch.zuehlke.reddit.features.news.overview
 
 import android.arch.lifecycle.Observer
 import android.arch.lifecycle.ViewModelProvider
@@ -11,14 +11,14 @@
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
-import ch.zuehlke.sbb.reddit.R
-import ch.zuehlke.sbb.reddit.di.Injectable
-import ch.zuehlke.sbb.reddit.features.news.NavigationController
-import ch.zuehlke.sbb.reddit.features.news.NewsViewModel
-import ch.zuehlke.sbb.reddit.features.news.detail.DetailFragment
-import ch.zuehlke.sbb.reddit.features.news.overview.adapter.impl.RedditNewsDelegateAdapter.OnNewsSelectedListener
-import ch.zuehlke.sbb.reddit.features.news.overview.adapter.impl.RedditOverviewAdapter
-import ch.zuehlke.sbb.reddit.models.RedditNewsData
+import ch.zuehlke.reddit.R
+import ch.zuehlke.reddit.di.Injectable
+import ch.zuehlke.reddit.features.news.NavigationController
+import ch.zuehlke.reddit.features.news.NewsViewModel
+import ch.zuehlke.reddit.features.news.detail.DetailFragment
+import ch.zuehlke.reddit.features.news.overview.adapter.impl.RedditNewsDelegateAdapter.OnNewsSelectedListener
+import ch.zuehlke.reddit.features.news.overview.adapter.impl.RedditOverviewAdapter
+import ch.zuehlke.reddit.models.RedditNewsData
 import kotlinx.android.synthetic.main.fragment_overview.*
 import javax.inject.Inject
 
Index: app/src/main/java/ch/zuehlke/reddit/features/login/LoginActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.sbb.reddit.features.login\n\nimport android.os.Bundle\n\nimport ch.zuehlke.sbb.reddit.R\nimport ch.zuehlke.sbb.reddit.features.BaseActivtiy\nimport ch.zuehlke.sbb.reddit.util.ActivityUtils\n\n/**\n * Created by chsc on 08.11.17.\n */\n\nclass LoginActivity : BaseActivtiy() {\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_login)\n\n\n        var loginFragment: LoginFragment? = supportFragmentManager.findFragmentById(R.id.contentFrame) as LoginFragment?\n        if (loginFragment == null) {\n            // Create the fragment\n            loginFragment = LoginFragment.newInstance()\n            ActivityUtils.addFragmentToActivity(\n                    supportFragmentManager, loginFragment, R.id.contentFrame)\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/features/login/LoginActivity.kt	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/java/ch/zuehlke/reddit/features/login/LoginActivity.kt	(revision )
@@ -1,10 +1,10 @@
-package ch.zuehlke.sbb.reddit.features.login
+package ch.zuehlke.reddit.features.login
 
 import android.os.Bundle
 
-import ch.zuehlke.sbb.reddit.R
-import ch.zuehlke.sbb.reddit.features.BaseActivtiy
-import ch.zuehlke.sbb.reddit.util.ActivityUtils
+import ch.zuehlke.reddit.R
+import ch.zuehlke.reddit.features.BaseActivtiy
+import ch.zuehlke.reddit.util.ActivityUtils
 
 /**
  * Created by chsc on 08.11.17.
Index: app/src/main/res/layout/fragment_detail.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<ch.zuehlke.sbb.reddit.features.news.overview.ScrollChildSwipeRefreshLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:id=\"@+id/refreshLayout\"\n    >\n\n    <android.support.v7.widget.RecyclerView\n        android:id=\"@+id/redditPostView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n    </android.support.v7.widget.RecyclerView>\n\n    <RelativeLayout\n        android:layout_height=\"match_parent\"\n        android:layout_width=\"match_parent\"\n        android:id=\"@+id/noRedditPostVIew\"\n        >\n        <TextView\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_centerInParent=\"true\"\n            android:text=\"@string/overview_screen_no_reddit_news\"\n            android:textAppearance=\"@style/TextAppearance.AppCompat.Title\"\n            android:gravity=\"center_vertical\"\n            />\n\n    </RelativeLayout>\n\n\n\n</ch.zuehlke.sbb.reddit.features.news.overview.ScrollChildSwipeRefreshLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_detail.xml	(revision 9c7877017e494c2253495c6c368b9562df4eb929)
+++ app/src/main/res/layout/fragment_detail.xml	(revision )
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="utf-8"?>
-<ch.zuehlke.sbb.reddit.features.news.overview.ScrollChildSwipeRefreshLayout
+<ch.zuehlke.reddit.features.news.overview.ScrollChildSwipeRefreshLayout
     xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:id="@+id/refreshLayout"
@@ -29,4 +29,4 @@
 
 
 
-</ch.zuehlke.sbb.reddit.features.news.overview.ScrollChildSwipeRefreshLayout>
\ No newline at end of file
+</ch.zuehlke.reddit.features.news.overview.ScrollChildSwipeRefreshLayout>
\ No newline at end of file
