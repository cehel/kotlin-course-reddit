Index: app/src/main/java/ch/zuehlke/reddit/di/ViewModelModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.reddit.di\n\nimport android.arch.lifecycle.ViewModel\nimport android.arch.lifecycle.ViewModelProvider\nimport ch.zuehlke.reddit.features.login.LoginViewModel\nimport ch.zuehlke.reddit.features.news.NewsViewModel\nimport dagger.Binds\nimport dagger.Module\nimport dagger.multibindings.IntoMap\n\n/**\n * Created by celineheldner on 06.03.18.\n */\n@Module\ninternal abstract class ViewModelModule{\n\n\n\n    @Binds\n    @IntoMap\n    @ViewModelKey(LoginViewModel::class)\n    abstract fun bindLoginViewModel(loginViewModel: LoginViewModel): ViewModel\n\n    @Binds\n    @IntoMap\n    @ViewModelKey(NewsViewModel::class)\n    abstract fun bindNewsViewModel(newsViewModel: NewsViewModel): ViewModel\n\n    @Binds\n    abstract fun bindViewModelFactory(factory: ViewModelFactory) : ViewModelProvider.Factory\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/di/ViewModelModule.kt	(revision 9582e71657d99469a36c3d7966f4b6c568de468d)
+++ app/src/main/java/ch/zuehlke/reddit/di/ViewModelModule.kt	(revision )
@@ -14,10 +14,7 @@
 @Module
 internal abstract class ViewModelModule{
 
-
-
-    @Binds
-    @IntoMap
+    @Binds @IntoMap
     @ViewModelKey(LoginViewModel::class)
     abstract fun bindLoginViewModel(loginViewModel: LoginViewModel): ViewModel
 
Index: app/src/main/java/ch/zuehlke/reddit/di/ViewModelFactory.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ch.zuehlke.reddit.di\n\nimport android.arch.lifecycle.ViewModel\nimport android.arch.lifecycle.ViewModelProvider\nimport javax.inject.Inject\nimport javax.inject.Provider\nimport javax.inject.Singleton\n\n/**\n * Created by celineheldner on 06.03.18.\n */\n@Singleton\nclass ViewModelFactory @Inject constructor(private val creators: Map<Class<out ViewModel>,@JvmSuppressWildcards Provider<ViewModel>>): ViewModelProvider.Factory{\n\n    @SuppressWarnings(\"unchecked\")\n    override fun <T : ViewModel?> create(modelClass: Class<T>): T {\n        var creator: Provider<ViewModel>? = creators[modelClass]\n        if (creator == null) {\n            for ((key, value) in creators) {\n                if (modelClass.isAssignableFrom(key)) {\n                    creator = value\n                    break\n                }\n            }\n        }\n        if (creator == null) throw IllegalArgumentException(\"unknown model class \" + modelClass)\n        try {\n            return creator.get() as T\n        } catch (e: Exception) {\n            throw RuntimeException(e)\n        }\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ch/zuehlke/reddit/di/ViewModelFactory.kt	(revision 9582e71657d99469a36c3d7966f4b6c568de468d)
+++ app/src/main/java/ch/zuehlke/reddit/di/ViewModelFactory.kt	(revision )
@@ -15,6 +15,7 @@
     @SuppressWarnings("unchecked")
     override fun <T : ViewModel?> create(modelClass: Class<T>): T {
         var creator: Provider<ViewModel>? = creators[modelClass]
+        //if not the exact class, but a subclass is in the map
         if (creator == null) {
             for ((key, value) in creators) {
                 if (modelClass.isAssignableFrom(key)) {
@@ -24,6 +25,8 @@
             }
         }
         if (creator == null) throw IllegalArgumentException("unknown model class " + modelClass)
+
+        //Return the ViewModel
         try {
             return creator.get() as T
         } catch (e: Exception) {
